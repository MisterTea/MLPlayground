/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.mistertea.clustering;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-1-15")
public class DecisionTreeNode implements org.apache.thrift.TBase<DecisionTreeNode, DecisionTreeNode._Fields>, java.io.Serializable, Cloneable, Comparable<DecisionTreeNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DecisionTreeNode");

  private static final org.apache.thrift.protocol.TField LEFT_FIELD_DESC = new org.apache.thrift.protocol.TField("left", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField RIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("right", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SPLIT_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("splitIndex", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DecisionTreeNodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DecisionTreeNodeTupleSchemeFactory());
  }

  public int left; // required
  public int right; // required
  public int splitIndex; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LEFT((short)1, "left"),
    RIGHT((short)2, "right"),
    SPLIT_INDEX((short)3, "splitIndex");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LEFT
          return LEFT;
        case 2: // RIGHT
          return RIGHT;
        case 3: // SPLIT_INDEX
          return SPLIT_INDEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LEFT_ISSET_ID = 0;
  private static final int __RIGHT_ISSET_ID = 1;
  private static final int __SPLITINDEX_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LEFT, new org.apache.thrift.meta_data.FieldMetaData("left", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RIGHT, new org.apache.thrift.meta_data.FieldMetaData("right", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPLIT_INDEX, new org.apache.thrift.meta_data.FieldMetaData("splitIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DecisionTreeNode.class, metaDataMap);
  }

  public DecisionTreeNode() {
  }

  public DecisionTreeNode(
    int left,
    int right,
    int splitIndex)
  {
    this();
    this.left = left;
    setLeftIsSet(true);
    this.right = right;
    setRightIsSet(true);
    this.splitIndex = splitIndex;
    setSplitIndexIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DecisionTreeNode(DecisionTreeNode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.left = other.left;
    this.right = other.right;
    this.splitIndex = other.splitIndex;
  }

  public DecisionTreeNode deepCopy() {
    return new DecisionTreeNode(this);
  }

  @Override
  public void clear() {
    setLeftIsSet(false);
    this.left = 0;
    setRightIsSet(false);
    this.right = 0;
    setSplitIndexIsSet(false);
    this.splitIndex = 0;
  }

  public int getLeft() {
    return this.left;
  }

  public DecisionTreeNode setLeft(int left) {
    this.left = left;
    setLeftIsSet(true);
    return this;
  }

  public void unsetLeft() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEFT_ISSET_ID);
  }

  /** Returns true if field left is set (has been assigned a value) and false otherwise */
  public boolean isSetLeft() {
    return EncodingUtils.testBit(__isset_bitfield, __LEFT_ISSET_ID);
  }

  public void setLeftIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEFT_ISSET_ID, value);
  }

  public int getRight() {
    return this.right;
  }

  public DecisionTreeNode setRight(int right) {
    this.right = right;
    setRightIsSet(true);
    return this;
  }

  public void unsetRight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RIGHT_ISSET_ID);
  }

  /** Returns true if field right is set (has been assigned a value) and false otherwise */
  public boolean isSetRight() {
    return EncodingUtils.testBit(__isset_bitfield, __RIGHT_ISSET_ID);
  }

  public void setRightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RIGHT_ISSET_ID, value);
  }

  public int getSplitIndex() {
    return this.splitIndex;
  }

  public DecisionTreeNode setSplitIndex(int splitIndex) {
    this.splitIndex = splitIndex;
    setSplitIndexIsSet(true);
    return this;
  }

  public void unsetSplitIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPLITINDEX_ISSET_ID);
  }

  /** Returns true if field splitIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetSplitIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __SPLITINDEX_ISSET_ID);
  }

  public void setSplitIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPLITINDEX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LEFT:
      if (value == null) {
        unsetLeft();
      } else {
        setLeft((Integer)value);
      }
      break;

    case RIGHT:
      if (value == null) {
        unsetRight();
      } else {
        setRight((Integer)value);
      }
      break;

    case SPLIT_INDEX:
      if (value == null) {
        unsetSplitIndex();
      } else {
        setSplitIndex((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LEFT:
      return Integer.valueOf(getLeft());

    case RIGHT:
      return Integer.valueOf(getRight());

    case SPLIT_INDEX:
      return Integer.valueOf(getSplitIndex());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LEFT:
      return isSetLeft();
    case RIGHT:
      return isSetRight();
    case SPLIT_INDEX:
      return isSetSplitIndex();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DecisionTreeNode)
      return this.equals((DecisionTreeNode)that);
    return false;
  }

  public boolean equals(DecisionTreeNode that) {
    if (that == null)
      return false;

    boolean this_present_left = true;
    boolean that_present_left = true;
    if (this_present_left || that_present_left) {
      if (!(this_present_left && that_present_left))
        return false;
      if (this.left != that.left)
        return false;
    }

    boolean this_present_right = true;
    boolean that_present_right = true;
    if (this_present_right || that_present_right) {
      if (!(this_present_right && that_present_right))
        return false;
      if (this.right != that.right)
        return false;
    }

    boolean this_present_splitIndex = true;
    boolean that_present_splitIndex = true;
    if (this_present_splitIndex || that_present_splitIndex) {
      if (!(this_present_splitIndex && that_present_splitIndex))
        return false;
      if (this.splitIndex != that.splitIndex)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DecisionTreeNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLeft()).compareTo(other.isSetLeft());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeft()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.left, other.left);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRight()).compareTo(other.isSetRight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.right, other.right);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSplitIndex()).compareTo(other.isSetSplitIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSplitIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splitIndex, other.splitIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DecisionTreeNode(");
    boolean first = true;

    sb.append("left:");
    sb.append(this.left);
    first = false;
    if (!first) sb.append(", ");
    sb.append("right:");
    sb.append(this.right);
    first = false;
    if (!first) sb.append(", ");
    sb.append("splitIndex:");
    sb.append(this.splitIndex);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DecisionTreeNodeStandardSchemeFactory implements SchemeFactory {
    public DecisionTreeNodeStandardScheme getScheme() {
      return new DecisionTreeNodeStandardScheme();
    }
  }

  private static class DecisionTreeNodeStandardScheme extends StandardScheme<DecisionTreeNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DecisionTreeNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LEFT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.left = iprot.readI32();
              struct.setLeftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.right = iprot.readI32();
              struct.setRightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPLIT_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.splitIndex = iprot.readI32();
              struct.setSplitIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DecisionTreeNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LEFT_FIELD_DESC);
      oprot.writeI32(struct.left);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RIGHT_FIELD_DESC);
      oprot.writeI32(struct.right);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPLIT_INDEX_FIELD_DESC);
      oprot.writeI32(struct.splitIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DecisionTreeNodeTupleSchemeFactory implements SchemeFactory {
    public DecisionTreeNodeTupleScheme getScheme() {
      return new DecisionTreeNodeTupleScheme();
    }
  }

  private static class DecisionTreeNodeTupleScheme extends TupleScheme<DecisionTreeNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DecisionTreeNode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLeft()) {
        optionals.set(0);
      }
      if (struct.isSetRight()) {
        optionals.set(1);
      }
      if (struct.isSetSplitIndex()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetLeft()) {
        oprot.writeI32(struct.left);
      }
      if (struct.isSetRight()) {
        oprot.writeI32(struct.right);
      }
      if (struct.isSetSplitIndex()) {
        oprot.writeI32(struct.splitIndex);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DecisionTreeNode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.left = iprot.readI32();
        struct.setLeftIsSet(true);
      }
      if (incoming.get(1)) {
        struct.right = iprot.readI32();
        struct.setRightIsSet(true);
      }
      if (incoming.get(2)) {
        struct.splitIndex = iprot.readI32();
        struct.setSplitIndexIsSet(true);
      }
    }
  }

}

