/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.mistertea.boardgame.landshark;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-1-15")
public class State implements org.apache.thrift.TBase<State, State._Fields>, java.io.Serializable, Cloneable, Comparable<State> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("State");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PLAYER_STATES_FIELD_DESC = new org.apache.thrift.protocol.TField("playerStates", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField HOUSES_FIELD_DESC = new org.apache.thrift.protocol.TField("houses", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField PLAYER_TURN_FIELD_DESC = new org.apache.thrift.protocol.TField("playerTurn", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TURN_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("turnState", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField AUCTION_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("auctionState", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField DICE_FIELD_DESC = new org.apache.thrift.protocol.TField("dice", org.apache.thrift.protocol.TType.LIST, (short)100);
  private static final org.apache.thrift.protocol.TField NUM_DOUBLES_FIELD_DESC = new org.apache.thrift.protocol.TField("numDoubles", org.apache.thrift.protocol.TType.I32, (short)101);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)102);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StateTupleSchemeFactory());
  }

  public String id; // required
  public List<PlayerState> playerStates; // required
  public Map<String,Integer> houses; // required
  public int playerTurn; // required
  /**
   * 
   * @see TurnState
   */
  public TurnState turnState; // required
  public AuctionState auctionState; // required
  public List<Integer> dice; // required
  public int numDoubles; // required
  public String message; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PLAYER_STATES((short)2, "playerStates"),
    HOUSES((short)3, "houses"),
    PLAYER_TURN((short)4, "playerTurn"),
    /**
     * 
     * @see TurnState
     */
    TURN_STATE((short)5, "turnState"),
    AUCTION_STATE((short)6, "auctionState"),
    DICE((short)100, "dice"),
    NUM_DOUBLES((short)101, "numDoubles"),
    MESSAGE((short)102, "message");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PLAYER_STATES
          return PLAYER_STATES;
        case 3: // HOUSES
          return HOUSES;
        case 4: // PLAYER_TURN
          return PLAYER_TURN;
        case 5: // TURN_STATE
          return TURN_STATE;
        case 6: // AUCTION_STATE
          return AUCTION_STATE;
        case 100: // DICE
          return DICE;
        case 101: // NUM_DOUBLES
          return NUM_DOUBLES;
        case 102: // MESSAGE
          return MESSAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PLAYERTURN_ISSET_ID = 0;
  private static final int __NUMDOUBLES_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAYER_STATES, new org.apache.thrift.meta_data.FieldMetaData("playerStates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PlayerState.class))));
    tmpMap.put(_Fields.HOUSES, new org.apache.thrift.meta_data.FieldMetaData("houses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PLAYER_TURN, new org.apache.thrift.meta_data.FieldMetaData("playerTurn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TURN_STATE, new org.apache.thrift.meta_data.FieldMetaData("turnState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TurnState.class)));
    tmpMap.put(_Fields.AUCTION_STATE, new org.apache.thrift.meta_data.FieldMetaData("auctionState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuctionState.class)));
    tmpMap.put(_Fields.DICE, new org.apache.thrift.meta_data.FieldMetaData("dice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.NUM_DOUBLES, new org.apache.thrift.meta_data.FieldMetaData("numDoubles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(State.class, metaDataMap);
  }

  public State() {
    this.playerStates = new ArrayList<PlayerState>();

    this.houses = new HashMap<String,Integer>();

    this.playerTurn = 0;

    this.turnState = com.github.mistertea.boardgame.landshark.TurnState.START_GAME;

    this.dice = new ArrayList<Integer>();

    this.numDoubles = 0;

  }

  public State(
    String id,
    List<PlayerState> playerStates,
    Map<String,Integer> houses,
    int playerTurn,
    TurnState turnState,
    AuctionState auctionState,
    List<Integer> dice,
    int numDoubles,
    String message)
  {
    this();
    this.id = id;
    this.playerStates = playerStates;
    this.houses = houses;
    this.playerTurn = playerTurn;
    setPlayerTurnIsSet(true);
    this.turnState = turnState;
    this.auctionState = auctionState;
    this.dice = dice;
    this.numDoubles = numDoubles;
    setNumDoublesIsSet(true);
    this.message = message;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public State(State other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetPlayerStates()) {
      List<PlayerState> __this__playerStates = new ArrayList<PlayerState>(other.playerStates.size());
      for (PlayerState other_element : other.playerStates) {
        __this__playerStates.add(new PlayerState(other_element));
      }
      this.playerStates = __this__playerStates;
    }
    if (other.isSetHouses()) {
      Map<String,Integer> __this__houses = new HashMap<String,Integer>(other.houses);
      this.houses = __this__houses;
    }
    this.playerTurn = other.playerTurn;
    if (other.isSetTurnState()) {
      this.turnState = other.turnState;
    }
    if (other.isSetAuctionState()) {
      this.auctionState = new AuctionState(other.auctionState);
    }
    if (other.isSetDice()) {
      List<Integer> __this__dice = new ArrayList<Integer>(other.dice);
      this.dice = __this__dice;
    }
    this.numDoubles = other.numDoubles;
    if (other.isSetMessage()) {
      this.message = other.message;
    }
  }

  public State deepCopy() {
    return new State(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.playerStates = new ArrayList<PlayerState>();

    this.houses = new HashMap<String,Integer>();

    this.playerTurn = 0;

    this.turnState = com.github.mistertea.boardgame.landshark.TurnState.START_GAME;

    this.auctionState = null;
    this.dice = new ArrayList<Integer>();

    this.numDoubles = 0;

    this.message = null;
  }

  public String getId() {
    return this.id;
  }

  public State setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getPlayerStatesSize() {
    return (this.playerStates == null) ? 0 : this.playerStates.size();
  }

  public java.util.Iterator<PlayerState> getPlayerStatesIterator() {
    return (this.playerStates == null) ? null : this.playerStates.iterator();
  }

  public void addToPlayerStates(PlayerState elem) {
    if (this.playerStates == null) {
      this.playerStates = new ArrayList<PlayerState>();
    }
    this.playerStates.add(elem);
  }

  public List<PlayerState> getPlayerStates() {
    return this.playerStates;
  }

  public State setPlayerStates(List<PlayerState> playerStates) {
    this.playerStates = playerStates;
    return this;
  }

  public void unsetPlayerStates() {
    this.playerStates = null;
  }

  /** Returns true if field playerStates is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerStates() {
    return this.playerStates != null;
  }

  public void setPlayerStatesIsSet(boolean value) {
    if (!value) {
      this.playerStates = null;
    }
  }

  public int getHousesSize() {
    return (this.houses == null) ? 0 : this.houses.size();
  }

  public void putToHouses(String key, int val) {
    if (this.houses == null) {
      this.houses = new HashMap<String,Integer>();
    }
    this.houses.put(key, val);
  }

  public Map<String,Integer> getHouses() {
    return this.houses;
  }

  public State setHouses(Map<String,Integer> houses) {
    this.houses = houses;
    return this;
  }

  public void unsetHouses() {
    this.houses = null;
  }

  /** Returns true if field houses is set (has been assigned a value) and false otherwise */
  public boolean isSetHouses() {
    return this.houses != null;
  }

  public void setHousesIsSet(boolean value) {
    if (!value) {
      this.houses = null;
    }
  }

  public int getPlayerTurn() {
    return this.playerTurn;
  }

  public State setPlayerTurn(int playerTurn) {
    this.playerTurn = playerTurn;
    setPlayerTurnIsSet(true);
    return this;
  }

  public void unsetPlayerTurn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLAYERTURN_ISSET_ID);
  }

  /** Returns true if field playerTurn is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerTurn() {
    return EncodingUtils.testBit(__isset_bitfield, __PLAYERTURN_ISSET_ID);
  }

  public void setPlayerTurnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLAYERTURN_ISSET_ID, value);
  }

  /**
   * 
   * @see TurnState
   */
  public TurnState getTurnState() {
    return this.turnState;
  }

  /**
   * 
   * @see TurnState
   */
  public State setTurnState(TurnState turnState) {
    this.turnState = turnState;
    return this;
  }

  public void unsetTurnState() {
    this.turnState = null;
  }

  /** Returns true if field turnState is set (has been assigned a value) and false otherwise */
  public boolean isSetTurnState() {
    return this.turnState != null;
  }

  public void setTurnStateIsSet(boolean value) {
    if (!value) {
      this.turnState = null;
    }
  }

  public AuctionState getAuctionState() {
    return this.auctionState;
  }

  public State setAuctionState(AuctionState auctionState) {
    this.auctionState = auctionState;
    return this;
  }

  public void unsetAuctionState() {
    this.auctionState = null;
  }

  /** Returns true if field auctionState is set (has been assigned a value) and false otherwise */
  public boolean isSetAuctionState() {
    return this.auctionState != null;
  }

  public void setAuctionStateIsSet(boolean value) {
    if (!value) {
      this.auctionState = null;
    }
  }

  public int getDiceSize() {
    return (this.dice == null) ? 0 : this.dice.size();
  }

  public java.util.Iterator<Integer> getDiceIterator() {
    return (this.dice == null) ? null : this.dice.iterator();
  }

  public void addToDice(int elem) {
    if (this.dice == null) {
      this.dice = new ArrayList<Integer>();
    }
    this.dice.add(elem);
  }

  public List<Integer> getDice() {
    return this.dice;
  }

  public State setDice(List<Integer> dice) {
    this.dice = dice;
    return this;
  }

  public void unsetDice() {
    this.dice = null;
  }

  /** Returns true if field dice is set (has been assigned a value) and false otherwise */
  public boolean isSetDice() {
    return this.dice != null;
  }

  public void setDiceIsSet(boolean value) {
    if (!value) {
      this.dice = null;
    }
  }

  public int getNumDoubles() {
    return this.numDoubles;
  }

  public State setNumDoubles(int numDoubles) {
    this.numDoubles = numDoubles;
    setNumDoublesIsSet(true);
    return this;
  }

  public void unsetNumDoubles() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMDOUBLES_ISSET_ID);
  }

  /** Returns true if field numDoubles is set (has been assigned a value) and false otherwise */
  public boolean isSetNumDoubles() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMDOUBLES_ISSET_ID);
  }

  public void setNumDoublesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMDOUBLES_ISSET_ID, value);
  }

  public String getMessage() {
    return this.message;
  }

  public State setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case PLAYER_STATES:
      if (value == null) {
        unsetPlayerStates();
      } else {
        setPlayerStates((List<PlayerState>)value);
      }
      break;

    case HOUSES:
      if (value == null) {
        unsetHouses();
      } else {
        setHouses((Map<String,Integer>)value);
      }
      break;

    case PLAYER_TURN:
      if (value == null) {
        unsetPlayerTurn();
      } else {
        setPlayerTurn((Integer)value);
      }
      break;

    case TURN_STATE:
      if (value == null) {
        unsetTurnState();
      } else {
        setTurnState((TurnState)value);
      }
      break;

    case AUCTION_STATE:
      if (value == null) {
        unsetAuctionState();
      } else {
        setAuctionState((AuctionState)value);
      }
      break;

    case DICE:
      if (value == null) {
        unsetDice();
      } else {
        setDice((List<Integer>)value);
      }
      break;

    case NUM_DOUBLES:
      if (value == null) {
        unsetNumDoubles();
      } else {
        setNumDoubles((Integer)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PLAYER_STATES:
      return getPlayerStates();

    case HOUSES:
      return getHouses();

    case PLAYER_TURN:
      return Integer.valueOf(getPlayerTurn());

    case TURN_STATE:
      return getTurnState();

    case AUCTION_STATE:
      return getAuctionState();

    case DICE:
      return getDice();

    case NUM_DOUBLES:
      return Integer.valueOf(getNumDoubles());

    case MESSAGE:
      return getMessage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PLAYER_STATES:
      return isSetPlayerStates();
    case HOUSES:
      return isSetHouses();
    case PLAYER_TURN:
      return isSetPlayerTurn();
    case TURN_STATE:
      return isSetTurnState();
    case AUCTION_STATE:
      return isSetAuctionState();
    case DICE:
      return isSetDice();
    case NUM_DOUBLES:
      return isSetNumDoubles();
    case MESSAGE:
      return isSetMessage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof State)
      return this.equals((State)that);
    return false;
  }

  public boolean equals(State that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_playerStates = true && this.isSetPlayerStates();
    boolean that_present_playerStates = true && that.isSetPlayerStates();
    if (this_present_playerStates || that_present_playerStates) {
      if (!(this_present_playerStates && that_present_playerStates))
        return false;
      if (!this.playerStates.equals(that.playerStates))
        return false;
    }

    boolean this_present_houses = true && this.isSetHouses();
    boolean that_present_houses = true && that.isSetHouses();
    if (this_present_houses || that_present_houses) {
      if (!(this_present_houses && that_present_houses))
        return false;
      if (!this.houses.equals(that.houses))
        return false;
    }

    boolean this_present_playerTurn = true;
    boolean that_present_playerTurn = true;
    if (this_present_playerTurn || that_present_playerTurn) {
      if (!(this_present_playerTurn && that_present_playerTurn))
        return false;
      if (this.playerTurn != that.playerTurn)
        return false;
    }

    boolean this_present_turnState = true && this.isSetTurnState();
    boolean that_present_turnState = true && that.isSetTurnState();
    if (this_present_turnState || that_present_turnState) {
      if (!(this_present_turnState && that_present_turnState))
        return false;
      if (!this.turnState.equals(that.turnState))
        return false;
    }

    boolean this_present_auctionState = true && this.isSetAuctionState();
    boolean that_present_auctionState = true && that.isSetAuctionState();
    if (this_present_auctionState || that_present_auctionState) {
      if (!(this_present_auctionState && that_present_auctionState))
        return false;
      if (!this.auctionState.equals(that.auctionState))
        return false;
    }

    boolean this_present_dice = true && this.isSetDice();
    boolean that_present_dice = true && that.isSetDice();
    if (this_present_dice || that_present_dice) {
      if (!(this_present_dice && that_present_dice))
        return false;
      if (!this.dice.equals(that.dice))
        return false;
    }

    boolean this_present_numDoubles = true;
    boolean that_present_numDoubles = true;
    if (this_present_numDoubles || that_present_numDoubles) {
      if (!(this_present_numDoubles && that_present_numDoubles))
        return false;
      if (this.numDoubles != that.numDoubles)
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(State other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerStates()).compareTo(other.isSetPlayerStates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerStates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerStates, other.playerStates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouses()).compareTo(other.isSetHouses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houses, other.houses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerTurn()).compareTo(other.isSetPlayerTurn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerTurn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerTurn, other.playerTurn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurnState()).compareTo(other.isSetTurnState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurnState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turnState, other.turnState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuctionState()).compareTo(other.isSetAuctionState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuctionState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auctionState, other.auctionState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDice()).compareTo(other.isSetDice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dice, other.dice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumDoubles()).compareTo(other.isSetNumDoubles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumDoubles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numDoubles, other.numDoubles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("State(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("playerStates:");
    if (this.playerStates == null) {
      sb.append("null");
    } else {
      sb.append(this.playerStates);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houses:");
    if (this.houses == null) {
      sb.append("null");
    } else {
      sb.append(this.houses);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("playerTurn:");
    sb.append(this.playerTurn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("turnState:");
    if (this.turnState == null) {
      sb.append("null");
    } else {
      sb.append(this.turnState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("auctionState:");
    if (this.auctionState == null) {
      sb.append("null");
    } else {
      sb.append(this.auctionState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dice:");
    if (this.dice == null) {
      sb.append("null");
    } else {
      sb.append(this.dice);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numDoubles:");
    sb.append(this.numDoubles);
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (auctionState != null) {
      auctionState.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StateStandardSchemeFactory implements SchemeFactory {
    public StateStandardScheme getScheme() {
      return new StateStandardScheme();
    }
  }

  private static class StateStandardScheme extends StandardScheme<State> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, State struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLAYER_STATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                struct.playerStates = new ArrayList<PlayerState>(_list26.size);
                for (int _i27 = 0; _i27 < _list26.size; ++_i27)
                {
                  PlayerState _elem28;
                  _elem28 = new PlayerState();
                  _elem28.read(iprot);
                  struct.playerStates.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setPlayerStatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOUSES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map29 = iprot.readMapBegin();
                struct.houses = new HashMap<String,Integer>(2*_map29.size);
                for (int _i30 = 0; _i30 < _map29.size; ++_i30)
                {
                  String _key31;
                  int _val32;
                  _key31 = iprot.readString();
                  _val32 = iprot.readI32();
                  struct.houses.put(_key31, _val32);
                }
                iprot.readMapEnd();
              }
              struct.setHousesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PLAYER_TURN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.playerTurn = iprot.readI32();
              struct.setPlayerTurnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TURN_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.turnState = TurnState.findByValue(iprot.readI32());
              struct.setTurnStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AUCTION_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.auctionState = new AuctionState();
              struct.auctionState.read(iprot);
              struct.setAuctionStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // DICE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
                struct.dice = new ArrayList<Integer>(_list33.size);
                for (int _i34 = 0; _i34 < _list33.size; ++_i34)
                {
                  int _elem35;
                  _elem35 = iprot.readI32();
                  struct.dice.add(_elem35);
                }
                iprot.readListEnd();
              }
              struct.setDiceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // NUM_DOUBLES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numDoubles = iprot.readI32();
              struct.setNumDoublesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, State struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.playerStates != null) {
        oprot.writeFieldBegin(PLAYER_STATES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.playerStates.size()));
          for (PlayerState _iter36 : struct.playerStates)
          {
            _iter36.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.houses != null) {
        oprot.writeFieldBegin(HOUSES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.houses.size()));
          for (Map.Entry<String, Integer> _iter37 : struct.houses.entrySet())
          {
            oprot.writeString(_iter37.getKey());
            oprot.writeI32(_iter37.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLAYER_TURN_FIELD_DESC);
      oprot.writeI32(struct.playerTurn);
      oprot.writeFieldEnd();
      if (struct.turnState != null) {
        oprot.writeFieldBegin(TURN_STATE_FIELD_DESC);
        oprot.writeI32(struct.turnState.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.auctionState != null) {
        oprot.writeFieldBegin(AUCTION_STATE_FIELD_DESC);
        struct.auctionState.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.dice != null) {
        oprot.writeFieldBegin(DICE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.dice.size()));
          for (int _iter38 : struct.dice)
          {
            oprot.writeI32(_iter38);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_DOUBLES_FIELD_DESC);
      oprot.writeI32(struct.numDoubles);
      oprot.writeFieldEnd();
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StateTupleSchemeFactory implements SchemeFactory {
    public StateTupleScheme getScheme() {
      return new StateTupleScheme();
    }
  }

  private static class StateTupleScheme extends TupleScheme<State> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, State struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPlayerStates()) {
        optionals.set(1);
      }
      if (struct.isSetHouses()) {
        optionals.set(2);
      }
      if (struct.isSetPlayerTurn()) {
        optionals.set(3);
      }
      if (struct.isSetTurnState()) {
        optionals.set(4);
      }
      if (struct.isSetAuctionState()) {
        optionals.set(5);
      }
      if (struct.isSetDice()) {
        optionals.set(6);
      }
      if (struct.isSetNumDoubles()) {
        optionals.set(7);
      }
      if (struct.isSetMessage()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetPlayerStates()) {
        {
          oprot.writeI32(struct.playerStates.size());
          for (PlayerState _iter39 : struct.playerStates)
          {
            _iter39.write(oprot);
          }
        }
      }
      if (struct.isSetHouses()) {
        {
          oprot.writeI32(struct.houses.size());
          for (Map.Entry<String, Integer> _iter40 : struct.houses.entrySet())
          {
            oprot.writeString(_iter40.getKey());
            oprot.writeI32(_iter40.getValue());
          }
        }
      }
      if (struct.isSetPlayerTurn()) {
        oprot.writeI32(struct.playerTurn);
      }
      if (struct.isSetTurnState()) {
        oprot.writeI32(struct.turnState.getValue());
      }
      if (struct.isSetAuctionState()) {
        struct.auctionState.write(oprot);
      }
      if (struct.isSetDice()) {
        {
          oprot.writeI32(struct.dice.size());
          for (int _iter41 : struct.dice)
          {
            oprot.writeI32(_iter41);
          }
        }
      }
      if (struct.isSetNumDoubles()) {
        oprot.writeI32(struct.numDoubles);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, State struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.playerStates = new ArrayList<PlayerState>(_list42.size);
          for (int _i43 = 0; _i43 < _list42.size; ++_i43)
          {
            PlayerState _elem44;
            _elem44 = new PlayerState();
            _elem44.read(iprot);
            struct.playerStates.add(_elem44);
          }
        }
        struct.setPlayerStatesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map45 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.houses = new HashMap<String,Integer>(2*_map45.size);
          for (int _i46 = 0; _i46 < _map45.size; ++_i46)
          {
            String _key47;
            int _val48;
            _key47 = iprot.readString();
            _val48 = iprot.readI32();
            struct.houses.put(_key47, _val48);
          }
        }
        struct.setHousesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.playerTurn = iprot.readI32();
        struct.setPlayerTurnIsSet(true);
      }
      if (incoming.get(4)) {
        struct.turnState = TurnState.findByValue(iprot.readI32());
        struct.setTurnStateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.auctionState = new AuctionState();
        struct.auctionState.read(iprot);
        struct.setAuctionStateIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.dice = new ArrayList<Integer>(_list49.size);
          for (int _i50 = 0; _i50 < _list49.size; ++_i50)
          {
            int _elem51;
            _elem51 = iprot.readI32();
            struct.dice.add(_elem51);
          }
        }
        struct.setDiceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.numDoubles = iprot.readI32();
        struct.setNumDoublesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
    }
  }

}

