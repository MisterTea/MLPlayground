/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.mistertea.boardgame.landshark;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-1-15")
public class PropertyStats implements org.apache.thrift.TBase<PropertyStats, PropertyStats._Fields>, java.io.Serializable, Cloneable, Comparable<PropertyStats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PropertyStats");

  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField INVESTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("investment", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REVENUE_FIELD_DESC = new org.apache.thrift.protocol.TField("revenue", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField STREET_FIELD_DESC = new org.apache.thrift.protocol.TField("street", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PropertyStatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PropertyStatsTupleSchemeFactory());
  }

  public String owner; // required
  public int price; // required
  public int investment; // required
  public int revenue; // required
  public boolean street; // required
  public int duration; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OWNER((short)1, "owner"),
    PRICE((short)2, "price"),
    INVESTMENT((short)3, "investment"),
    REVENUE((short)4, "revenue"),
    STREET((short)5, "street"),
    DURATION((short)6, "duration");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OWNER
          return OWNER;
        case 2: // PRICE
          return PRICE;
        case 3: // INVESTMENT
          return INVESTMENT;
        case 4: // REVENUE
          return REVENUE;
        case 5: // STREET
          return STREET;
        case 6: // DURATION
          return DURATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRICE_ISSET_ID = 0;
  private static final int __INVESTMENT_ISSET_ID = 1;
  private static final int __REVENUE_ISSET_ID = 2;
  private static final int __STREET_ISSET_ID = 3;
  private static final int __DURATION_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INVESTMENT, new org.apache.thrift.meta_data.FieldMetaData("investment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REVENUE, new org.apache.thrift.meta_data.FieldMetaData("revenue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STREET, new org.apache.thrift.meta_data.FieldMetaData("street", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PropertyStats.class, metaDataMap);
  }

  public PropertyStats() {
  }

  public PropertyStats(
    String owner,
    int price,
    int investment,
    int revenue,
    boolean street,
    int duration)
  {
    this();
    this.owner = owner;
    this.price = price;
    setPriceIsSet(true);
    this.investment = investment;
    setInvestmentIsSet(true);
    this.revenue = revenue;
    setRevenueIsSet(true);
    this.street = street;
    setStreetIsSet(true);
    this.duration = duration;
    setDurationIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PropertyStats(PropertyStats other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    this.price = other.price;
    this.investment = other.investment;
    this.revenue = other.revenue;
    this.street = other.street;
    this.duration = other.duration;
  }

  public PropertyStats deepCopy() {
    return new PropertyStats(this);
  }

  @Override
  public void clear() {
    this.owner = null;
    setPriceIsSet(false);
    this.price = 0;
    setInvestmentIsSet(false);
    this.investment = 0;
    setRevenueIsSet(false);
    this.revenue = 0;
    setStreetIsSet(false);
    this.street = false;
    setDurationIsSet(false);
    this.duration = 0;
  }

  public String getOwner() {
    return this.owner;
  }

  public PropertyStats setOwner(String owner) {
    this.owner = owner;
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public int getPrice() {
    return this.price;
  }

  public PropertyStats setPrice(int price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public int getInvestment() {
    return this.investment;
  }

  public PropertyStats setInvestment(int investment) {
    this.investment = investment;
    setInvestmentIsSet(true);
    return this;
  }

  public void unsetInvestment() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVESTMENT_ISSET_ID);
  }

  /** Returns true if field investment is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestment() {
    return EncodingUtils.testBit(__isset_bitfield, __INVESTMENT_ISSET_ID);
  }

  public void setInvestmentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVESTMENT_ISSET_ID, value);
  }

  public int getRevenue() {
    return this.revenue;
  }

  public PropertyStats setRevenue(int revenue) {
    this.revenue = revenue;
    setRevenueIsSet(true);
    return this;
  }

  public void unsetRevenue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVENUE_ISSET_ID);
  }

  /** Returns true if field revenue is set (has been assigned a value) and false otherwise */
  public boolean isSetRevenue() {
    return EncodingUtils.testBit(__isset_bitfield, __REVENUE_ISSET_ID);
  }

  public void setRevenueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVENUE_ISSET_ID, value);
  }

  public boolean isStreet() {
    return this.street;
  }

  public PropertyStats setStreet(boolean street) {
    this.street = street;
    setStreetIsSet(true);
    return this;
  }

  public void unsetStreet() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STREET_ISSET_ID);
  }

  /** Returns true if field street is set (has been assigned a value) and false otherwise */
  public boolean isSetStreet() {
    return EncodingUtils.testBit(__isset_bitfield, __STREET_ISSET_ID);
  }

  public void setStreetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STREET_ISSET_ID, value);
  }

  public int getDuration() {
    return this.duration;
  }

  public PropertyStats setDuration(int duration) {
    this.duration = duration;
    setDurationIsSet(true);
    return this;
  }

  public void unsetDuration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  /** Returns true if field duration is set (has been assigned a value) and false otherwise */
  public boolean isSetDuration() {
    return EncodingUtils.testBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  public void setDurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURATION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((String)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Integer)value);
      }
      break;

    case INVESTMENT:
      if (value == null) {
        unsetInvestment();
      } else {
        setInvestment((Integer)value);
      }
      break;

    case REVENUE:
      if (value == null) {
        unsetRevenue();
      } else {
        setRevenue((Integer)value);
      }
      break;

    case STREET:
      if (value == null) {
        unsetStreet();
      } else {
        setStreet((Boolean)value);
      }
      break;

    case DURATION:
      if (value == null) {
        unsetDuration();
      } else {
        setDuration((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OWNER:
      return getOwner();

    case PRICE:
      return Integer.valueOf(getPrice());

    case INVESTMENT:
      return Integer.valueOf(getInvestment());

    case REVENUE:
      return Integer.valueOf(getRevenue());

    case STREET:
      return Boolean.valueOf(isStreet());

    case DURATION:
      return Integer.valueOf(getDuration());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OWNER:
      return isSetOwner();
    case PRICE:
      return isSetPrice();
    case INVESTMENT:
      return isSetInvestment();
    case REVENUE:
      return isSetRevenue();
    case STREET:
      return isSetStreet();
    case DURATION:
      return isSetDuration();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PropertyStats)
      return this.equals((PropertyStats)that);
    return false;
  }

  public boolean equals(PropertyStats that) {
    if (that == null)
      return false;

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_investment = true;
    boolean that_present_investment = true;
    if (this_present_investment || that_present_investment) {
      if (!(this_present_investment && that_present_investment))
        return false;
      if (this.investment != that.investment)
        return false;
    }

    boolean this_present_revenue = true;
    boolean that_present_revenue = true;
    if (this_present_revenue || that_present_revenue) {
      if (!(this_present_revenue && that_present_revenue))
        return false;
      if (this.revenue != that.revenue)
        return false;
    }

    boolean this_present_street = true;
    boolean that_present_street = true;
    if (this_present_street || that_present_street) {
      if (!(this_present_street && that_present_street))
        return false;
      if (this.street != that.street)
        return false;
    }

    boolean this_present_duration = true;
    boolean that_present_duration = true;
    if (this_present_duration || that_present_duration) {
      if (!(this_present_duration && that_present_duration))
        return false;
      if (this.duration != that.duration)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PropertyStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOwner()).compareTo(other.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, other.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestment()).compareTo(other.isSetInvestment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investment, other.investment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRevenue()).compareTo(other.isSetRevenue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRevenue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.revenue, other.revenue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStreet()).compareTo(other.isSetStreet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStreet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.street, other.street);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuration()).compareTo(other.isSetDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, other.duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PropertyStats(");
    boolean first = true;

    sb.append("owner:");
    if (this.owner == null) {
      sb.append("null");
    } else {
      sb.append(this.owner);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("investment:");
    sb.append(this.investment);
    first = false;
    if (!first) sb.append(", ");
    sb.append("revenue:");
    sb.append(this.revenue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("street:");
    sb.append(this.street);
    first = false;
    if (!first) sb.append(", ");
    sb.append("duration:");
    sb.append(this.duration);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PropertyStatsStandardSchemeFactory implements SchemeFactory {
    public PropertyStatsStandardScheme getScheme() {
      return new PropertyStatsStandardScheme();
    }
  }

  private static class PropertyStatsStandardScheme extends StandardScheme<PropertyStats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PropertyStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owner = iprot.readString();
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.price = iprot.readI32();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INVESTMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.investment = iprot.readI32();
              struct.setInvestmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REVENUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.revenue = iprot.readI32();
              struct.setRevenueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STREET
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.street = iprot.readBool();
              struct.setStreetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.duration = iprot.readI32();
              struct.setDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PropertyStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.owner != null) {
        oprot.writeFieldBegin(OWNER_FIELD_DESC);
        oprot.writeString(struct.owner);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeI32(struct.price);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INVESTMENT_FIELD_DESC);
      oprot.writeI32(struct.investment);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REVENUE_FIELD_DESC);
      oprot.writeI32(struct.revenue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STREET_FIELD_DESC);
      oprot.writeBool(struct.street);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DURATION_FIELD_DESC);
      oprot.writeI32(struct.duration);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PropertyStatsTupleSchemeFactory implements SchemeFactory {
    public PropertyStatsTupleScheme getScheme() {
      return new PropertyStatsTupleScheme();
    }
  }

  private static class PropertyStatsTupleScheme extends TupleScheme<PropertyStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PropertyStats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOwner()) {
        optionals.set(0);
      }
      if (struct.isSetPrice()) {
        optionals.set(1);
      }
      if (struct.isSetInvestment()) {
        optionals.set(2);
      }
      if (struct.isSetRevenue()) {
        optionals.set(3);
      }
      if (struct.isSetStreet()) {
        optionals.set(4);
      }
      if (struct.isSetDuration()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetOwner()) {
        oprot.writeString(struct.owner);
      }
      if (struct.isSetPrice()) {
        oprot.writeI32(struct.price);
      }
      if (struct.isSetInvestment()) {
        oprot.writeI32(struct.investment);
      }
      if (struct.isSetRevenue()) {
        oprot.writeI32(struct.revenue);
      }
      if (struct.isSetStreet()) {
        oprot.writeBool(struct.street);
      }
      if (struct.isSetDuration()) {
        oprot.writeI32(struct.duration);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PropertyStats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.owner = iprot.readString();
        struct.setOwnerIsSet(true);
      }
      if (incoming.get(1)) {
        struct.price = iprot.readI32();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.investment = iprot.readI32();
        struct.setInvestmentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.revenue = iprot.readI32();
        struct.setRevenueIsSet(true);
      }
      if (incoming.get(4)) {
        struct.street = iprot.readBool();
        struct.setStreetIsSet(true);
      }
      if (incoming.get(5)) {
        struct.duration = iprot.readI32();
        struct.setDurationIsSet(true);
      }
    }
  }

}

