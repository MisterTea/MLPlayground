/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.mistertea.boardgame.landshark;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-1-15")
public class LandsharkCommand implements org.apache.thrift.TBase<LandsharkCommand, LandsharkCommand._Fields>, java.io.Serializable, Cloneable, Comparable<LandsharkCommand> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LandsharkCommand");

  private static final org.apache.thrift.protocol.TField PLAYER_FIELD_DESC = new org.apache.thrift.protocol.TField("player", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CREATION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("creationTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField HOUSE_PURCHASES_FIELD_DESC = new org.apache.thrift.protocol.TField("housePurchases", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LandsharkCommandStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LandsharkCommandTupleSchemeFactory());
  }

  public String player; // required
  public long creationTime; // required
  public int type; // required
  public String property; // required
  public Map<String,Integer> housePurchases; // required
  public int bid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLAYER((short)1, "player"),
    CREATION_TIME((short)2, "creationTime"),
    TYPE((short)3, "type"),
    PROPERTY((short)4, "property"),
    HOUSE_PURCHASES((short)5, "housePurchases"),
    BID((short)6, "bid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLAYER
          return PLAYER;
        case 2: // CREATION_TIME
          return CREATION_TIME;
        case 3: // TYPE
          return TYPE;
        case 4: // PROPERTY
          return PROPERTY;
        case 5: // HOUSE_PURCHASES
          return HOUSE_PURCHASES;
        case 6: // BID
          return BID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATIONTIME_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __BID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLAYER, new org.apache.thrift.meta_data.FieldMetaData("player", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATION_TIME, new org.apache.thrift.meta_data.FieldMetaData("creationTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_PURCHASES, new org.apache.thrift.meta_data.FieldMetaData("housePurchases", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LandsharkCommand.class, metaDataMap);
  }

  public LandsharkCommand() {
  }

  public LandsharkCommand(
    String player,
    long creationTime,
    int type,
    String property,
    Map<String,Integer> housePurchases,
    int bid)
  {
    this();
    this.player = player;
    this.creationTime = creationTime;
    setCreationTimeIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.property = property;
    this.housePurchases = housePurchases;
    this.bid = bid;
    setBidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LandsharkCommand(LandsharkCommand other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPlayer()) {
      this.player = other.player;
    }
    this.creationTime = other.creationTime;
    this.type = other.type;
    if (other.isSetProperty()) {
      this.property = other.property;
    }
    if (other.isSetHousePurchases()) {
      Map<String,Integer> __this__housePurchases = new HashMap<String,Integer>(other.housePurchases);
      this.housePurchases = __this__housePurchases;
    }
    this.bid = other.bid;
  }

  public LandsharkCommand deepCopy() {
    return new LandsharkCommand(this);
  }

  @Override
  public void clear() {
    this.player = null;
    setCreationTimeIsSet(false);
    this.creationTime = 0;
    setTypeIsSet(false);
    this.type = 0;
    this.property = null;
    this.housePurchases = null;
    setBidIsSet(false);
    this.bid = 0;
  }

  public String getPlayer() {
    return this.player;
  }

  public LandsharkCommand setPlayer(String player) {
    this.player = player;
    return this;
  }

  public void unsetPlayer() {
    this.player = null;
  }

  /** Returns true if field player is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayer() {
    return this.player != null;
  }

  public void setPlayerIsSet(boolean value) {
    if (!value) {
      this.player = null;
    }
  }

  public long getCreationTime() {
    return this.creationTime;
  }

  public LandsharkCommand setCreationTime(long creationTime) {
    this.creationTime = creationTime;
    setCreationTimeIsSet(true);
    return this;
  }

  public void unsetCreationTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATIONTIME_ISSET_ID);
  }

  /** Returns true if field creationTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreationTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATIONTIME_ISSET_ID);
  }

  public void setCreationTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATIONTIME_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public LandsharkCommand setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public String getProperty() {
    return this.property;
  }

  public LandsharkCommand setProperty(String property) {
    this.property = property;
    return this;
  }

  public void unsetProperty() {
    this.property = null;
  }

  /** Returns true if field property is set (has been assigned a value) and false otherwise */
  public boolean isSetProperty() {
    return this.property != null;
  }

  public void setPropertyIsSet(boolean value) {
    if (!value) {
      this.property = null;
    }
  }

  public int getHousePurchasesSize() {
    return (this.housePurchases == null) ? 0 : this.housePurchases.size();
  }

  public void putToHousePurchases(String key, int val) {
    if (this.housePurchases == null) {
      this.housePurchases = new HashMap<String,Integer>();
    }
    this.housePurchases.put(key, val);
  }

  public Map<String,Integer> getHousePurchases() {
    return this.housePurchases;
  }

  public LandsharkCommand setHousePurchases(Map<String,Integer> housePurchases) {
    this.housePurchases = housePurchases;
    return this;
  }

  public void unsetHousePurchases() {
    this.housePurchases = null;
  }

  /** Returns true if field housePurchases is set (has been assigned a value) and false otherwise */
  public boolean isSetHousePurchases() {
    return this.housePurchases != null;
  }

  public void setHousePurchasesIsSet(boolean value) {
    if (!value) {
      this.housePurchases = null;
    }
  }

  public int getBid() {
    return this.bid;
  }

  public LandsharkCommand setBid(int bid) {
    this.bid = bid;
    setBidIsSet(true);
    return this;
  }

  public void unsetBid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
  }

  /** Returns true if field bid is set (has been assigned a value) and false otherwise */
  public boolean isSetBid() {
    return EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
  }

  public void setBidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLAYER:
      if (value == null) {
        unsetPlayer();
      } else {
        setPlayer((String)value);
      }
      break;

    case CREATION_TIME:
      if (value == null) {
        unsetCreationTime();
      } else {
        setCreationTime((Long)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case PROPERTY:
      if (value == null) {
        unsetProperty();
      } else {
        setProperty((String)value);
      }
      break;

    case HOUSE_PURCHASES:
      if (value == null) {
        unsetHousePurchases();
      } else {
        setHousePurchases((Map<String,Integer>)value);
      }
      break;

    case BID:
      if (value == null) {
        unsetBid();
      } else {
        setBid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLAYER:
      return getPlayer();

    case CREATION_TIME:
      return Long.valueOf(getCreationTime());

    case TYPE:
      return Integer.valueOf(getType());

    case PROPERTY:
      return getProperty();

    case HOUSE_PURCHASES:
      return getHousePurchases();

    case BID:
      return Integer.valueOf(getBid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLAYER:
      return isSetPlayer();
    case CREATION_TIME:
      return isSetCreationTime();
    case TYPE:
      return isSetType();
    case PROPERTY:
      return isSetProperty();
    case HOUSE_PURCHASES:
      return isSetHousePurchases();
    case BID:
      return isSetBid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LandsharkCommand)
      return this.equals((LandsharkCommand)that);
    return false;
  }

  public boolean equals(LandsharkCommand that) {
    if (that == null)
      return false;

    boolean this_present_player = true && this.isSetPlayer();
    boolean that_present_player = true && that.isSetPlayer();
    if (this_present_player || that_present_player) {
      if (!(this_present_player && that_present_player))
        return false;
      if (!this.player.equals(that.player))
        return false;
    }

    boolean this_present_creationTime = true;
    boolean that_present_creationTime = true;
    if (this_present_creationTime || that_present_creationTime) {
      if (!(this_present_creationTime && that_present_creationTime))
        return false;
      if (this.creationTime != that.creationTime)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_property = true && this.isSetProperty();
    boolean that_present_property = true && that.isSetProperty();
    if (this_present_property || that_present_property) {
      if (!(this_present_property && that_present_property))
        return false;
      if (!this.property.equals(that.property))
        return false;
    }

    boolean this_present_housePurchases = true && this.isSetHousePurchases();
    boolean that_present_housePurchases = true && that.isSetHousePurchases();
    if (this_present_housePurchases || that_present_housePurchases) {
      if (!(this_present_housePurchases && that_present_housePurchases))
        return false;
      if (!this.housePurchases.equals(that.housePurchases))
        return false;
    }

    boolean this_present_bid = true;
    boolean that_present_bid = true;
    if (this_present_bid || that_present_bid) {
      if (!(this_present_bid && that_present_bid))
        return false;
      if (this.bid != that.bid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(LandsharkCommand other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPlayer()).compareTo(other.isSetPlayer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.player, other.player);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreationTime()).compareTo(other.isSetCreationTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreationTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creationTime, other.creationTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHousePurchases()).compareTo(other.isSetHousePurchases());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHousePurchases()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.housePurchases, other.housePurchases);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBid()).compareTo(other.isSetBid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LandsharkCommand(");
    boolean first = true;

    sb.append("player:");
    if (this.player == null) {
      sb.append("null");
    } else {
      sb.append(this.player);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creationTime:");
    sb.append(this.creationTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("property:");
    if (this.property == null) {
      sb.append("null");
    } else {
      sb.append(this.property);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("housePurchases:");
    if (this.housePurchases == null) {
      sb.append("null");
    } else {
      sb.append(this.housePurchases);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bid:");
    sb.append(this.bid);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LandsharkCommandStandardSchemeFactory implements SchemeFactory {
    public LandsharkCommandStandardScheme getScheme() {
      return new LandsharkCommandStandardScheme();
    }
  }

  private static class LandsharkCommandStandardScheme extends StandardScheme<LandsharkCommand> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LandsharkCommand struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLAYER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.player = iprot.readString();
              struct.setPlayerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.creationTime = iprot.readI64();
              struct.setCreationTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROPERTY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.property = iprot.readString();
              struct.setPropertyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HOUSE_PURCHASES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map88 = iprot.readMapBegin();
                struct.housePurchases = new HashMap<String,Integer>(2*_map88.size);
                for (int _i89 = 0; _i89 < _map88.size; ++_i89)
                {
                  String _key90;
                  int _val91;
                  _key90 = iprot.readString();
                  _val91 = iprot.readI32();
                  struct.housePurchases.put(_key90, _val91);
                }
                iprot.readMapEnd();
              }
              struct.setHousePurchasesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bid = iprot.readI32();
              struct.setBidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LandsharkCommand struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.player != null) {
        oprot.writeFieldBegin(PLAYER_FIELD_DESC);
        oprot.writeString(struct.player);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATION_TIME_FIELD_DESC);
      oprot.writeI64(struct.creationTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      if (struct.property != null) {
        oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
        oprot.writeString(struct.property);
        oprot.writeFieldEnd();
      }
      if (struct.housePurchases != null) {
        oprot.writeFieldBegin(HOUSE_PURCHASES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.housePurchases.size()));
          for (Map.Entry<String, Integer> _iter92 : struct.housePurchases.entrySet())
          {
            oprot.writeString(_iter92.getKey());
            oprot.writeI32(_iter92.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BID_FIELD_DESC);
      oprot.writeI32(struct.bid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LandsharkCommandTupleSchemeFactory implements SchemeFactory {
    public LandsharkCommandTupleScheme getScheme() {
      return new LandsharkCommandTupleScheme();
    }
  }

  private static class LandsharkCommandTupleScheme extends TupleScheme<LandsharkCommand> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LandsharkCommand struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPlayer()) {
        optionals.set(0);
      }
      if (struct.isSetCreationTime()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetProperty()) {
        optionals.set(3);
      }
      if (struct.isSetHousePurchases()) {
        optionals.set(4);
      }
      if (struct.isSetBid()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetPlayer()) {
        oprot.writeString(struct.player);
      }
      if (struct.isSetCreationTime()) {
        oprot.writeI64(struct.creationTime);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetProperty()) {
        oprot.writeString(struct.property);
      }
      if (struct.isSetHousePurchases()) {
        {
          oprot.writeI32(struct.housePurchases.size());
          for (Map.Entry<String, Integer> _iter93 : struct.housePurchases.entrySet())
          {
            oprot.writeString(_iter93.getKey());
            oprot.writeI32(_iter93.getValue());
          }
        }
      }
      if (struct.isSetBid()) {
        oprot.writeI32(struct.bid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LandsharkCommand struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.player = iprot.readString();
        struct.setPlayerIsSet(true);
      }
      if (incoming.get(1)) {
        struct.creationTime = iprot.readI64();
        struct.setCreationTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.property = iprot.readString();
        struct.setPropertyIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map94 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.housePurchases = new HashMap<String,Integer>(2*_map94.size);
          for (int _i95 = 0; _i95 < _map94.size; ++_i95)
          {
            String _key96;
            int _val97;
            _key96 = iprot.readString();
            _val97 = iprot.readI32();
            struct.housePurchases.put(_key96, _val97);
          }
        }
        struct.setHousePurchasesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.bid = iprot.readI32();
        struct.setBidIsSet(true);
      }
    }
  }

}

