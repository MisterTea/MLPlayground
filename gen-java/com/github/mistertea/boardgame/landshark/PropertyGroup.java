/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.mistertea.boardgame.landshark;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PropertyGroup implements org.apache.thrift.TBase<PropertyGroup, PropertyGroup._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PropertyGroup");

  private static final org.apache.thrift.protocol.TField MEMBER_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("memberNames", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField HOUSE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("housePrice", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PropertyGroupStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PropertyGroupTupleSchemeFactory());
  }

  public Set<String> memberNames; // required
  public int housePrice; // required
  /**
   * 
   * @see PropertyType
   */
  public PropertyType type; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEMBER_NAMES((short)1, "memberNames"),
    HOUSE_PRICE((short)2, "housePrice"),
    /**
     * 
     * @see PropertyType
     */
    TYPE((short)3, "type");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEMBER_NAMES
          return MEMBER_NAMES;
        case 2: // HOUSE_PRICE
          return HOUSE_PRICE;
        case 3: // TYPE
          return TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HOUSEPRICE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEMBER_NAMES, new org.apache.thrift.meta_data.FieldMetaData("memberNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.HOUSE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("housePrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PropertyType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PropertyGroup.class, metaDataMap);
  }

  public PropertyGroup() {
    this.memberNames = new HashSet<String>();

  }

  public PropertyGroup(
    Set<String> memberNames,
    int housePrice,
    PropertyType type)
  {
    this();
    this.memberNames = memberNames;
    this.housePrice = housePrice;
    setHousePriceIsSet(true);
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PropertyGroup(PropertyGroup other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMemberNames()) {
      Set<String> __this__memberNames = new HashSet<String>();
      for (String other_element : other.memberNames) {
        __this__memberNames.add(other_element);
      }
      this.memberNames = __this__memberNames;
    }
    this.housePrice = other.housePrice;
    if (other.isSetType()) {
      this.type = other.type;
    }
  }

  public PropertyGroup deepCopy() {
    return new PropertyGroup(this);
  }

  @Override
  public void clear() {
    this.memberNames = new HashSet<String>();

    setHousePriceIsSet(false);
    this.housePrice = 0;
    this.type = null;
  }

  public int getMemberNamesSize() {
    return (this.memberNames == null) ? 0 : this.memberNames.size();
  }

  public java.util.Iterator<String> getMemberNamesIterator() {
    return (this.memberNames == null) ? null : this.memberNames.iterator();
  }

  public void addToMemberNames(String elem) {
    if (this.memberNames == null) {
      this.memberNames = new HashSet<String>();
    }
    this.memberNames.add(elem);
  }

  public Set<String> getMemberNames() {
    return this.memberNames;
  }

  public PropertyGroup setMemberNames(Set<String> memberNames) {
    this.memberNames = memberNames;
    return this;
  }

  public void unsetMemberNames() {
    this.memberNames = null;
  }

  /** Returns true if field memberNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberNames() {
    return this.memberNames != null;
  }

  public void setMemberNamesIsSet(boolean value) {
    if (!value) {
      this.memberNames = null;
    }
  }

  public int getHousePrice() {
    return this.housePrice;
  }

  public PropertyGroup setHousePrice(int housePrice) {
    this.housePrice = housePrice;
    setHousePriceIsSet(true);
    return this;
  }

  public void unsetHousePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUSEPRICE_ISSET_ID);
  }

  /** Returns true if field housePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetHousePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __HOUSEPRICE_ISSET_ID);
  }

  public void setHousePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUSEPRICE_ISSET_ID, value);
  }

  /**
   * 
   * @see PropertyType
   */
  public PropertyType getType() {
    return this.type;
  }

  /**
   * 
   * @see PropertyType
   */
  public PropertyGroup setType(PropertyType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEMBER_NAMES:
      if (value == null) {
        unsetMemberNames();
      } else {
        setMemberNames((Set<String>)value);
      }
      break;

    case HOUSE_PRICE:
      if (value == null) {
        unsetHousePrice();
      } else {
        setHousePrice((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((PropertyType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEMBER_NAMES:
      return getMemberNames();

    case HOUSE_PRICE:
      return Integer.valueOf(getHousePrice());

    case TYPE:
      return getType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEMBER_NAMES:
      return isSetMemberNames();
    case HOUSE_PRICE:
      return isSetHousePrice();
    case TYPE:
      return isSetType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PropertyGroup)
      return this.equals((PropertyGroup)that);
    return false;
  }

  public boolean equals(PropertyGroup that) {
    if (that == null)
      return false;

    boolean this_present_memberNames = true && this.isSetMemberNames();
    boolean that_present_memberNames = true && that.isSetMemberNames();
    if (this_present_memberNames || that_present_memberNames) {
      if (!(this_present_memberNames && that_present_memberNames))
        return false;
      if (!this.memberNames.equals(that.memberNames))
        return false;
    }

    boolean this_present_housePrice = true;
    boolean that_present_housePrice = true;
    if (this_present_housePrice || that_present_housePrice) {
      if (!(this_present_housePrice && that_present_housePrice))
        return false;
      if (this.housePrice != that.housePrice)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PropertyGroup other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PropertyGroup typedOther = (PropertyGroup)other;

    lastComparison = Boolean.valueOf(isSetMemberNames()).compareTo(typedOther.isSetMemberNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberNames, typedOther.memberNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHousePrice()).compareTo(typedOther.isSetHousePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHousePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.housePrice, typedOther.housePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PropertyGroup(");
    boolean first = true;

    sb.append("memberNames:");
    if (this.memberNames == null) {
      sb.append("null");
    } else {
      sb.append(this.memberNames);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("housePrice:");
    sb.append(this.housePrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PropertyGroupStandardSchemeFactory implements SchemeFactory {
    public PropertyGroupStandardScheme getScheme() {
      return new PropertyGroupStandardScheme();
    }
  }

  private static class PropertyGroupStandardScheme extends StandardScheme<PropertyGroup> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PropertyGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEMBER_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.memberNames = new HashSet<String>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  String _elem2; // required
                  _elem2 = iprot.readString();
                  struct.memberNames.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setMemberNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOUSE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.housePrice = iprot.readI32();
              struct.setHousePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = PropertyType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PropertyGroup struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.memberNames != null) {
        oprot.writeFieldBegin(MEMBER_NAMES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.memberNames.size()));
          for (String _iter3 : struct.memberNames)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HOUSE_PRICE_FIELD_DESC);
      oprot.writeI32(struct.housePrice);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PropertyGroupTupleSchemeFactory implements SchemeFactory {
    public PropertyGroupTupleScheme getScheme() {
      return new PropertyGroupTupleScheme();
    }
  }

  private static class PropertyGroupTupleScheme extends TupleScheme<PropertyGroup> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PropertyGroup struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMemberNames()) {
        optionals.set(0);
      }
      if (struct.isSetHousePrice()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetMemberNames()) {
        {
          oprot.writeI32(struct.memberNames.size());
          for (String _iter4 : struct.memberNames)
          {
            oprot.writeString(_iter4);
          }
        }
      }
      if (struct.isSetHousePrice()) {
        oprot.writeI32(struct.housePrice);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PropertyGroup struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.memberNames = new HashSet<String>(2*_set5.size);
          for (int _i6 = 0; _i6 < _set5.size; ++_i6)
          {
            String _elem7; // required
            _elem7 = iprot.readString();
            struct.memberNames.add(_elem7);
          }
        }
        struct.setMemberNamesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.housePrice = iprot.readI32();
        struct.setHousePriceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = PropertyType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
    }
  }

}

