/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.mistertea.boardgame.landshark;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-1-15")
public class Board implements org.apache.thrift.TBase<Board, Board._Fields>, java.io.Serializable, Cloneable, Comparable<Board> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Board");

  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField PROPERTY_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyOrder", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField STARTING_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("startingMoney", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PROPERTY_GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyGroups", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BoardStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BoardTupleSchemeFactory());
  }

  public Map<String,Property> properties; // required
  public List<String> propertyOrder; // required
  public int startingMoney; // required
  public Map<String,PropertyGroup> propertyGroups; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROPERTIES((short)1, "properties"),
    PROPERTY_ORDER((short)2, "propertyOrder"),
    STARTING_MONEY((short)3, "startingMoney"),
    PROPERTY_GROUPS((short)4, "propertyGroups");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROPERTIES
          return PROPERTIES;
        case 2: // PROPERTY_ORDER
          return PROPERTY_ORDER;
        case 3: // STARTING_MONEY
          return STARTING_MONEY;
        case 4: // PROPERTY_GROUPS
          return PROPERTY_GROUPS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTINGMONEY_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Property.class))));
    tmpMap.put(_Fields.PROPERTY_ORDER, new org.apache.thrift.meta_data.FieldMetaData("propertyOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STARTING_MONEY, new org.apache.thrift.meta_data.FieldMetaData("startingMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROPERTY_GROUPS, new org.apache.thrift.meta_data.FieldMetaData("propertyGroups", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PropertyGroup.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Board.class, metaDataMap);
  }

  public Board() {
    this.properties = new HashMap<String,Property>();

    this.propertyOrder = new ArrayList<String>();

    this.startingMoney = 1500;

    this.propertyGroups = new HashMap<String,PropertyGroup>();

  }

  public Board(
    Map<String,Property> properties,
    List<String> propertyOrder,
    int startingMoney,
    Map<String,PropertyGroup> propertyGroups)
  {
    this();
    this.properties = properties;
    this.propertyOrder = propertyOrder;
    this.startingMoney = startingMoney;
    setStartingMoneyIsSet(true);
    this.propertyGroups = propertyGroups;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Board(Board other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProperties()) {
      Map<String,Property> __this__properties = new HashMap<String,Property>(other.properties.size());
      for (Map.Entry<String, Property> other_element : other.properties.entrySet()) {

        String other_element_key = other_element.getKey();
        Property other_element_value = other_element.getValue();

        String __this__properties_copy_key = other_element_key;

        Property __this__properties_copy_value = new Property(other_element_value);

        __this__properties.put(__this__properties_copy_key, __this__properties_copy_value);
      }
      this.properties = __this__properties;
    }
    if (other.isSetPropertyOrder()) {
      List<String> __this__propertyOrder = new ArrayList<String>(other.propertyOrder);
      this.propertyOrder = __this__propertyOrder;
    }
    this.startingMoney = other.startingMoney;
    if (other.isSetPropertyGroups()) {
      Map<String,PropertyGroup> __this__propertyGroups = new HashMap<String,PropertyGroup>(other.propertyGroups.size());
      for (Map.Entry<String, PropertyGroup> other_element : other.propertyGroups.entrySet()) {

        String other_element_key = other_element.getKey();
        PropertyGroup other_element_value = other_element.getValue();

        String __this__propertyGroups_copy_key = other_element_key;

        PropertyGroup __this__propertyGroups_copy_value = new PropertyGroup(other_element_value);

        __this__propertyGroups.put(__this__propertyGroups_copy_key, __this__propertyGroups_copy_value);
      }
      this.propertyGroups = __this__propertyGroups;
    }
  }

  public Board deepCopy() {
    return new Board(this);
  }

  @Override
  public void clear() {
    this.properties = new HashMap<String,Property>();

    this.propertyOrder = new ArrayList<String>();

    this.startingMoney = 1500;

    this.propertyGroups = new HashMap<String,PropertyGroup>();

  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(String key, Property val) {
    if (this.properties == null) {
      this.properties = new HashMap<String,Property>();
    }
    this.properties.put(key, val);
  }

  public Map<String,Property> getProperties() {
    return this.properties;
  }

  public Board setProperties(Map<String,Property> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public int getPropertyOrderSize() {
    return (this.propertyOrder == null) ? 0 : this.propertyOrder.size();
  }

  public java.util.Iterator<String> getPropertyOrderIterator() {
    return (this.propertyOrder == null) ? null : this.propertyOrder.iterator();
  }

  public void addToPropertyOrder(String elem) {
    if (this.propertyOrder == null) {
      this.propertyOrder = new ArrayList<String>();
    }
    this.propertyOrder.add(elem);
  }

  public List<String> getPropertyOrder() {
    return this.propertyOrder;
  }

  public Board setPropertyOrder(List<String> propertyOrder) {
    this.propertyOrder = propertyOrder;
    return this;
  }

  public void unsetPropertyOrder() {
    this.propertyOrder = null;
  }

  /** Returns true if field propertyOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetPropertyOrder() {
    return this.propertyOrder != null;
  }

  public void setPropertyOrderIsSet(boolean value) {
    if (!value) {
      this.propertyOrder = null;
    }
  }

  public int getStartingMoney() {
    return this.startingMoney;
  }

  public Board setStartingMoney(int startingMoney) {
    this.startingMoney = startingMoney;
    setStartingMoneyIsSet(true);
    return this;
  }

  public void unsetStartingMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTINGMONEY_ISSET_ID);
  }

  /** Returns true if field startingMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetStartingMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTINGMONEY_ISSET_ID);
  }

  public void setStartingMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTINGMONEY_ISSET_ID, value);
  }

  public int getPropertyGroupsSize() {
    return (this.propertyGroups == null) ? 0 : this.propertyGroups.size();
  }

  public void putToPropertyGroups(String key, PropertyGroup val) {
    if (this.propertyGroups == null) {
      this.propertyGroups = new HashMap<String,PropertyGroup>();
    }
    this.propertyGroups.put(key, val);
  }

  public Map<String,PropertyGroup> getPropertyGroups() {
    return this.propertyGroups;
  }

  public Board setPropertyGroups(Map<String,PropertyGroup> propertyGroups) {
    this.propertyGroups = propertyGroups;
    return this;
  }

  public void unsetPropertyGroups() {
    this.propertyGroups = null;
  }

  /** Returns true if field propertyGroups is set (has been assigned a value) and false otherwise */
  public boolean isSetPropertyGroups() {
    return this.propertyGroups != null;
  }

  public void setPropertyGroupsIsSet(boolean value) {
    if (!value) {
      this.propertyGroups = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((Map<String,Property>)value);
      }
      break;

    case PROPERTY_ORDER:
      if (value == null) {
        unsetPropertyOrder();
      } else {
        setPropertyOrder((List<String>)value);
      }
      break;

    case STARTING_MONEY:
      if (value == null) {
        unsetStartingMoney();
      } else {
        setStartingMoney((Integer)value);
      }
      break;

    case PROPERTY_GROUPS:
      if (value == null) {
        unsetPropertyGroups();
      } else {
        setPropertyGroups((Map<String,PropertyGroup>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROPERTIES:
      return getProperties();

    case PROPERTY_ORDER:
      return getPropertyOrder();

    case STARTING_MONEY:
      return Integer.valueOf(getStartingMoney());

    case PROPERTY_GROUPS:
      return getPropertyGroups();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROPERTIES:
      return isSetProperties();
    case PROPERTY_ORDER:
      return isSetPropertyOrder();
    case STARTING_MONEY:
      return isSetStartingMoney();
    case PROPERTY_GROUPS:
      return isSetPropertyGroups();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Board)
      return this.equals((Board)that);
    return false;
  }

  public boolean equals(Board that) {
    if (that == null)
      return false;

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    boolean this_present_propertyOrder = true && this.isSetPropertyOrder();
    boolean that_present_propertyOrder = true && that.isSetPropertyOrder();
    if (this_present_propertyOrder || that_present_propertyOrder) {
      if (!(this_present_propertyOrder && that_present_propertyOrder))
        return false;
      if (!this.propertyOrder.equals(that.propertyOrder))
        return false;
    }

    boolean this_present_startingMoney = true;
    boolean that_present_startingMoney = true;
    if (this_present_startingMoney || that_present_startingMoney) {
      if (!(this_present_startingMoney && that_present_startingMoney))
        return false;
      if (this.startingMoney != that.startingMoney)
        return false;
    }

    boolean this_present_propertyGroups = true && this.isSetPropertyGroups();
    boolean that_present_propertyGroups = true && that.isSetPropertyGroups();
    if (this_present_propertyGroups || that_present_propertyGroups) {
      if (!(this_present_propertyGroups && that_present_propertyGroups))
        return false;
      if (!this.propertyGroups.equals(that.propertyGroups))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Board other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPropertyOrder()).compareTo(other.isSetPropertyOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPropertyOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyOrder, other.propertyOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartingMoney()).compareTo(other.isSetStartingMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartingMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startingMoney, other.startingMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPropertyGroups()).compareTo(other.isSetPropertyGroups());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPropertyGroups()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyGroups, other.propertyGroups);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Board(");
    boolean first = true;

    sb.append("properties:");
    if (this.properties == null) {
      sb.append("null");
    } else {
      sb.append(this.properties);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("propertyOrder:");
    if (this.propertyOrder == null) {
      sb.append("null");
    } else {
      sb.append(this.propertyOrder);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startingMoney:");
    sb.append(this.startingMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("propertyGroups:");
    if (this.propertyGroups == null) {
      sb.append("null");
    } else {
      sb.append(this.propertyGroups);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BoardStandardSchemeFactory implements SchemeFactory {
    public BoardStandardScheme getScheme() {
      return new BoardStandardScheme();
    }
  }

  private static class BoardStandardScheme extends StandardScheme<Board> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Board struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map60 = iprot.readMapBegin();
                struct.properties = new HashMap<String,Property>(2*_map60.size);
                for (int _i61 = 0; _i61 < _map60.size; ++_i61)
                {
                  String _key62;
                  Property _val63;
                  _key62 = iprot.readString();
                  _val63 = new Property();
                  _val63.read(iprot);
                  struct.properties.put(_key62, _val63);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROPERTY_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.propertyOrder = new ArrayList<String>(_list64.size);
                for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                {
                  String _elem66;
                  _elem66 = iprot.readString();
                  struct.propertyOrder.add(_elem66);
                }
                iprot.readListEnd();
              }
              struct.setPropertyOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STARTING_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startingMoney = iprot.readI32();
              struct.setStartingMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROPERTY_GROUPS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map67 = iprot.readMapBegin();
                struct.propertyGroups = new HashMap<String,PropertyGroup>(2*_map67.size);
                for (int _i68 = 0; _i68 < _map67.size; ++_i68)
                {
                  String _key69;
                  PropertyGroup _val70;
                  _key69 = iprot.readString();
                  _val70 = new PropertyGroup();
                  _val70.read(iprot);
                  struct.propertyGroups.put(_key69, _val70);
                }
                iprot.readMapEnd();
              }
              struct.setPropertyGroupsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Board struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.properties != null) {
        oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.properties.size()));
          for (Map.Entry<String, Property> _iter71 : struct.properties.entrySet())
          {
            oprot.writeString(_iter71.getKey());
            _iter71.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.propertyOrder != null) {
        oprot.writeFieldBegin(PROPERTY_ORDER_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.propertyOrder.size()));
          for (String _iter72 : struct.propertyOrder)
          {
            oprot.writeString(_iter72);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STARTING_MONEY_FIELD_DESC);
      oprot.writeI32(struct.startingMoney);
      oprot.writeFieldEnd();
      if (struct.propertyGroups != null) {
        oprot.writeFieldBegin(PROPERTY_GROUPS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.propertyGroups.size()));
          for (Map.Entry<String, PropertyGroup> _iter73 : struct.propertyGroups.entrySet())
          {
            oprot.writeString(_iter73.getKey());
            _iter73.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BoardTupleSchemeFactory implements SchemeFactory {
    public BoardTupleScheme getScheme() {
      return new BoardTupleScheme();
    }
  }

  private static class BoardTupleScheme extends TupleScheme<Board> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Board struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProperties()) {
        optionals.set(0);
      }
      if (struct.isSetPropertyOrder()) {
        optionals.set(1);
      }
      if (struct.isSetStartingMoney()) {
        optionals.set(2);
      }
      if (struct.isSetPropertyGroups()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (Map.Entry<String, Property> _iter74 : struct.properties.entrySet())
          {
            oprot.writeString(_iter74.getKey());
            _iter74.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetPropertyOrder()) {
        {
          oprot.writeI32(struct.propertyOrder.size());
          for (String _iter75 : struct.propertyOrder)
          {
            oprot.writeString(_iter75);
          }
        }
      }
      if (struct.isSetStartingMoney()) {
        oprot.writeI32(struct.startingMoney);
      }
      if (struct.isSetPropertyGroups()) {
        {
          oprot.writeI32(struct.propertyGroups.size());
          for (Map.Entry<String, PropertyGroup> _iter76 : struct.propertyGroups.entrySet())
          {
            oprot.writeString(_iter76.getKey());
            _iter76.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Board struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map77 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.properties = new HashMap<String,Property>(2*_map77.size);
          for (int _i78 = 0; _i78 < _map77.size; ++_i78)
          {
            String _key79;
            Property _val80;
            _key79 = iprot.readString();
            _val80 = new Property();
            _val80.read(iprot);
            struct.properties.put(_key79, _val80);
          }
        }
        struct.setPropertiesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.propertyOrder = new ArrayList<String>(_list81.size);
          for (int _i82 = 0; _i82 < _list81.size; ++_i82)
          {
            String _elem83;
            _elem83 = iprot.readString();
            struct.propertyOrder.add(_elem83);
          }
        }
        struct.setPropertyOrderIsSet(true);
      }
      if (incoming.get(2)) {
        struct.startingMoney = iprot.readI32();
        struct.setStartingMoneyIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map84 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.propertyGroups = new HashMap<String,PropertyGroup>(2*_map84.size);
          for (int _i85 = 0; _i85 < _map84.size; ++_i85)
          {
            String _key86;
            PropertyGroup _val87;
            _key86 = iprot.readString();
            _val87 = new PropertyGroup();
            _val87.read(iprot);
            struct.propertyGroups.put(_key86, _val87);
          }
        }
        struct.setPropertyGroupsIsSet(true);
      }
    }
  }

}

