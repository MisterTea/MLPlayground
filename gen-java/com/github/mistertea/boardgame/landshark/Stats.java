/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.mistertea.boardgame.landshark;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-1-15")
public class Stats implements org.apache.thrift.TBase<Stats, Stats._Fields>, java.io.Serializable, Cloneable, Comparable<Stats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Stats");

  private static final org.apache.thrift.protocol.TField PROPERTY_OWNER_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyOwnerStats", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField PLAYER_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("playerStats", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StatsTupleSchemeFactory());
  }

  public Map<String,List<PropertyStats>> propertyOwnerStats; // required
  public Map<String,PlayerStats> playerStats; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROPERTY_OWNER_STATS((short)1, "propertyOwnerStats"),
    PLAYER_STATS((short)2, "playerStats");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROPERTY_OWNER_STATS
          return PROPERTY_OWNER_STATS;
        case 2: // PLAYER_STATS
          return PLAYER_STATS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROPERTY_OWNER_STATS, new org.apache.thrift.meta_data.FieldMetaData("propertyOwnerStats", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PropertyStats.class)))));
    tmpMap.put(_Fields.PLAYER_STATS, new org.apache.thrift.meta_data.FieldMetaData("playerStats", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PlayerStats.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Stats.class, metaDataMap);
  }

  public Stats() {
    this.propertyOwnerStats = new HashMap<String,List<PropertyStats>>();

    this.playerStats = new HashMap<String,PlayerStats>();

  }

  public Stats(
    Map<String,List<PropertyStats>> propertyOwnerStats,
    Map<String,PlayerStats> playerStats)
  {
    this();
    this.propertyOwnerStats = propertyOwnerStats;
    this.playerStats = playerStats;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Stats(Stats other) {
    if (other.isSetPropertyOwnerStats()) {
      Map<String,List<PropertyStats>> __this__propertyOwnerStats = new HashMap<String,List<PropertyStats>>(other.propertyOwnerStats.size());
      for (Map.Entry<String, List<PropertyStats>> other_element : other.propertyOwnerStats.entrySet()) {

        String other_element_key = other_element.getKey();
        List<PropertyStats> other_element_value = other_element.getValue();

        String __this__propertyOwnerStats_copy_key = other_element_key;

        List<PropertyStats> __this__propertyOwnerStats_copy_value = new ArrayList<PropertyStats>(other_element_value.size());
        for (PropertyStats other_element_value_element : other_element_value) {
          __this__propertyOwnerStats_copy_value.add(new PropertyStats(other_element_value_element));
        }

        __this__propertyOwnerStats.put(__this__propertyOwnerStats_copy_key, __this__propertyOwnerStats_copy_value);
      }
      this.propertyOwnerStats = __this__propertyOwnerStats;
    }
    if (other.isSetPlayerStats()) {
      Map<String,PlayerStats> __this__playerStats = new HashMap<String,PlayerStats>(other.playerStats.size());
      for (Map.Entry<String, PlayerStats> other_element : other.playerStats.entrySet()) {

        String other_element_key = other_element.getKey();
        PlayerStats other_element_value = other_element.getValue();

        String __this__playerStats_copy_key = other_element_key;

        PlayerStats __this__playerStats_copy_value = new PlayerStats(other_element_value);

        __this__playerStats.put(__this__playerStats_copy_key, __this__playerStats_copy_value);
      }
      this.playerStats = __this__playerStats;
    }
  }

  public Stats deepCopy() {
    return new Stats(this);
  }

  @Override
  public void clear() {
    this.propertyOwnerStats = new HashMap<String,List<PropertyStats>>();

    this.playerStats = new HashMap<String,PlayerStats>();

  }

  public int getPropertyOwnerStatsSize() {
    return (this.propertyOwnerStats == null) ? 0 : this.propertyOwnerStats.size();
  }

  public void putToPropertyOwnerStats(String key, List<PropertyStats> val) {
    if (this.propertyOwnerStats == null) {
      this.propertyOwnerStats = new HashMap<String,List<PropertyStats>>();
    }
    this.propertyOwnerStats.put(key, val);
  }

  public Map<String,List<PropertyStats>> getPropertyOwnerStats() {
    return this.propertyOwnerStats;
  }

  public Stats setPropertyOwnerStats(Map<String,List<PropertyStats>> propertyOwnerStats) {
    this.propertyOwnerStats = propertyOwnerStats;
    return this;
  }

  public void unsetPropertyOwnerStats() {
    this.propertyOwnerStats = null;
  }

  /** Returns true if field propertyOwnerStats is set (has been assigned a value) and false otherwise */
  public boolean isSetPropertyOwnerStats() {
    return this.propertyOwnerStats != null;
  }

  public void setPropertyOwnerStatsIsSet(boolean value) {
    if (!value) {
      this.propertyOwnerStats = null;
    }
  }

  public int getPlayerStatsSize() {
    return (this.playerStats == null) ? 0 : this.playerStats.size();
  }

  public void putToPlayerStats(String key, PlayerStats val) {
    if (this.playerStats == null) {
      this.playerStats = new HashMap<String,PlayerStats>();
    }
    this.playerStats.put(key, val);
  }

  public Map<String,PlayerStats> getPlayerStats() {
    return this.playerStats;
  }

  public Stats setPlayerStats(Map<String,PlayerStats> playerStats) {
    this.playerStats = playerStats;
    return this;
  }

  public void unsetPlayerStats() {
    this.playerStats = null;
  }

  /** Returns true if field playerStats is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerStats() {
    return this.playerStats != null;
  }

  public void setPlayerStatsIsSet(boolean value) {
    if (!value) {
      this.playerStats = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROPERTY_OWNER_STATS:
      if (value == null) {
        unsetPropertyOwnerStats();
      } else {
        setPropertyOwnerStats((Map<String,List<PropertyStats>>)value);
      }
      break;

    case PLAYER_STATS:
      if (value == null) {
        unsetPlayerStats();
      } else {
        setPlayerStats((Map<String,PlayerStats>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROPERTY_OWNER_STATS:
      return getPropertyOwnerStats();

    case PLAYER_STATS:
      return getPlayerStats();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROPERTY_OWNER_STATS:
      return isSetPropertyOwnerStats();
    case PLAYER_STATS:
      return isSetPlayerStats();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Stats)
      return this.equals((Stats)that);
    return false;
  }

  public boolean equals(Stats that) {
    if (that == null)
      return false;

    boolean this_present_propertyOwnerStats = true && this.isSetPropertyOwnerStats();
    boolean that_present_propertyOwnerStats = true && that.isSetPropertyOwnerStats();
    if (this_present_propertyOwnerStats || that_present_propertyOwnerStats) {
      if (!(this_present_propertyOwnerStats && that_present_propertyOwnerStats))
        return false;
      if (!this.propertyOwnerStats.equals(that.propertyOwnerStats))
        return false;
    }

    boolean this_present_playerStats = true && this.isSetPlayerStats();
    boolean that_present_playerStats = true && that.isSetPlayerStats();
    if (this_present_playerStats || that_present_playerStats) {
      if (!(this_present_playerStats && that_present_playerStats))
        return false;
      if (!this.playerStats.equals(that.playerStats))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Stats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPropertyOwnerStats()).compareTo(other.isSetPropertyOwnerStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPropertyOwnerStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyOwnerStats, other.propertyOwnerStats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerStats()).compareTo(other.isSetPlayerStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerStats, other.playerStats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Stats(");
    boolean first = true;

    sb.append("propertyOwnerStats:");
    if (this.propertyOwnerStats == null) {
      sb.append("null");
    } else {
      sb.append(this.propertyOwnerStats);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("playerStats:");
    if (this.playerStats == null) {
      sb.append("null");
    } else {
      sb.append(this.playerStats);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatsStandardSchemeFactory implements SchemeFactory {
    public StatsStandardScheme getScheme() {
      return new StatsStandardScheme();
    }
  }

  private static class StatsStandardScheme extends StandardScheme<Stats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Stats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROPERTY_OWNER_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map98 = iprot.readMapBegin();
                struct.propertyOwnerStats = new HashMap<String,List<PropertyStats>>(2*_map98.size);
                for (int _i99 = 0; _i99 < _map98.size; ++_i99)
                {
                  String _key100;
                  List<PropertyStats> _val101;
                  _key100 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list102 = iprot.readListBegin();
                    _val101 = new ArrayList<PropertyStats>(_list102.size);
                    for (int _i103 = 0; _i103 < _list102.size; ++_i103)
                    {
                      PropertyStats _elem104;
                      _elem104 = new PropertyStats();
                      _elem104.read(iprot);
                      _val101.add(_elem104);
                    }
                    iprot.readListEnd();
                  }
                  struct.propertyOwnerStats.put(_key100, _val101);
                }
                iprot.readMapEnd();
              }
              struct.setPropertyOwnerStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLAYER_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map105 = iprot.readMapBegin();
                struct.playerStats = new HashMap<String,PlayerStats>(2*_map105.size);
                for (int _i106 = 0; _i106 < _map105.size; ++_i106)
                {
                  String _key107;
                  PlayerStats _val108;
                  _key107 = iprot.readString();
                  _val108 = new PlayerStats();
                  _val108.read(iprot);
                  struct.playerStats.put(_key107, _val108);
                }
                iprot.readMapEnd();
              }
              struct.setPlayerStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Stats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.propertyOwnerStats != null) {
        oprot.writeFieldBegin(PROPERTY_OWNER_STATS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.propertyOwnerStats.size()));
          for (Map.Entry<String, List<PropertyStats>> _iter109 : struct.propertyOwnerStats.entrySet())
          {
            oprot.writeString(_iter109.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter109.getValue().size()));
              for (PropertyStats _iter110 : _iter109.getValue())
              {
                _iter110.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.playerStats != null) {
        oprot.writeFieldBegin(PLAYER_STATS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.playerStats.size()));
          for (Map.Entry<String, PlayerStats> _iter111 : struct.playerStats.entrySet())
          {
            oprot.writeString(_iter111.getKey());
            _iter111.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatsTupleSchemeFactory implements SchemeFactory {
    public StatsTupleScheme getScheme() {
      return new StatsTupleScheme();
    }
  }

  private static class StatsTupleScheme extends TupleScheme<Stats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Stats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPropertyOwnerStats()) {
        optionals.set(0);
      }
      if (struct.isSetPlayerStats()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetPropertyOwnerStats()) {
        {
          oprot.writeI32(struct.propertyOwnerStats.size());
          for (Map.Entry<String, List<PropertyStats>> _iter112 : struct.propertyOwnerStats.entrySet())
          {
            oprot.writeString(_iter112.getKey());
            {
              oprot.writeI32(_iter112.getValue().size());
              for (PropertyStats _iter113 : _iter112.getValue())
              {
                _iter113.write(oprot);
              }
            }
          }
        }
      }
      if (struct.isSetPlayerStats()) {
        {
          oprot.writeI32(struct.playerStats.size());
          for (Map.Entry<String, PlayerStats> _iter114 : struct.playerStats.entrySet())
          {
            oprot.writeString(_iter114.getKey());
            _iter114.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Stats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map115 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.propertyOwnerStats = new HashMap<String,List<PropertyStats>>(2*_map115.size);
          for (int _i116 = 0; _i116 < _map115.size; ++_i116)
          {
            String _key117;
            List<PropertyStats> _val118;
            _key117 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list119 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _val118 = new ArrayList<PropertyStats>(_list119.size);
              for (int _i120 = 0; _i120 < _list119.size; ++_i120)
              {
                PropertyStats _elem121;
                _elem121 = new PropertyStats();
                _elem121.read(iprot);
                _val118.add(_elem121);
              }
            }
            struct.propertyOwnerStats.put(_key117, _val118);
          }
        }
        struct.setPropertyOwnerStatsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map122 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.playerStats = new HashMap<String,PlayerStats>(2*_map122.size);
          for (int _i123 = 0; _i123 < _map122.size; ++_i123)
          {
            String _key124;
            PlayerStats _val125;
            _key124 = iprot.readString();
            _val125 = new PlayerStats();
            _val125.read(iprot);
            struct.playerStats.put(_key124, _val125);
          }
        }
        struct.setPlayerStatsIsSet(true);
      }
    }
  }

}

