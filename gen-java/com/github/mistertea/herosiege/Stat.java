/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.mistertea.herosiege;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-1-15")
public class Stat implements org.apache.thrift.TBase<Stat, Stat._Fields>, java.io.Serializable, Cloneable, Comparable<Stat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Stat");

  private static final org.apache.thrift.protocol.TField CURRENT_FIELD_DESC = new org.apache.thrift.protocol.TField("current", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("base", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ADD_FIELD_DESC = new org.apache.thrift.protocol.TField("add", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MULTIPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("multiply", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DIVIDE_FIELD_DESC = new org.apache.thrift.protocol.TField("divide", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StatStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StatTupleSchemeFactory());
  }

  public int current; // required
  public int base; // required
  public int add; // required
  public int multiply; // required
  public int divide; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CURRENT((short)1, "current"),
    BASE((short)2, "base"),
    ADD((short)3, "add"),
    MULTIPLY((short)4, "multiply"),
    DIVIDE((short)5, "divide");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CURRENT
          return CURRENT;
        case 2: // BASE
          return BASE;
        case 3: // ADD
          return ADD;
        case 4: // MULTIPLY
          return MULTIPLY;
        case 5: // DIVIDE
          return DIVIDE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CURRENT_ISSET_ID = 0;
  private static final int __BASE_ISSET_ID = 1;
  private static final int __ADD_ISSET_ID = 2;
  private static final int __MULTIPLY_ISSET_ID = 3;
  private static final int __DIVIDE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CURRENT, new org.apache.thrift.meta_data.FieldMetaData("current", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BASE, new org.apache.thrift.meta_data.FieldMetaData("base", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADD, new org.apache.thrift.meta_data.FieldMetaData("add", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MULTIPLY, new org.apache.thrift.meta_data.FieldMetaData("multiply", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIVIDE, new org.apache.thrift.meta_data.FieldMetaData("divide", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Stat.class, metaDataMap);
  }

  public Stat() {
  }

  public Stat(
    int current,
    int base,
    int add,
    int multiply,
    int divide)
  {
    this();
    this.current = current;
    setCurrentIsSet(true);
    this.base = base;
    setBaseIsSet(true);
    this.add = add;
    setAddIsSet(true);
    this.multiply = multiply;
    setMultiplyIsSet(true);
    this.divide = divide;
    setDivideIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Stat(Stat other) {
    __isset_bitfield = other.__isset_bitfield;
    this.current = other.current;
    this.base = other.base;
    this.add = other.add;
    this.multiply = other.multiply;
    this.divide = other.divide;
  }

  public Stat deepCopy() {
    return new Stat(this);
  }

  @Override
  public void clear() {
    setCurrentIsSet(false);
    this.current = 0;
    setBaseIsSet(false);
    this.base = 0;
    setAddIsSet(false);
    this.add = 0;
    setMultiplyIsSet(false);
    this.multiply = 0;
    setDivideIsSet(false);
    this.divide = 0;
  }

  public int getCurrent() {
    return this.current;
  }

  public Stat setCurrent(int current) {
    this.current = current;
    setCurrentIsSet(true);
    return this;
  }

  public void unsetCurrent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENT_ISSET_ID);
  }

  /** Returns true if field current is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrent() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENT_ISSET_ID);
  }

  public void setCurrentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENT_ISSET_ID, value);
  }

  public int getBase() {
    return this.base;
  }

  public Stat setBase(int base) {
    this.base = base;
    setBaseIsSet(true);
    return this;
  }

  public void unsetBase() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BASE_ISSET_ID);
  }

  /** Returns true if field base is set (has been assigned a value) and false otherwise */
  public boolean isSetBase() {
    return EncodingUtils.testBit(__isset_bitfield, __BASE_ISSET_ID);
  }

  public void setBaseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BASE_ISSET_ID, value);
  }

  public int getAdd() {
    return this.add;
  }

  public Stat setAdd(int add) {
    this.add = add;
    setAddIsSet(true);
    return this;
  }

  public void unsetAdd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADD_ISSET_ID);
  }

  /** Returns true if field add is set (has been assigned a value) and false otherwise */
  public boolean isSetAdd() {
    return EncodingUtils.testBit(__isset_bitfield, __ADD_ISSET_ID);
  }

  public void setAddIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADD_ISSET_ID, value);
  }

  public int getMultiply() {
    return this.multiply;
  }

  public Stat setMultiply(int multiply) {
    this.multiply = multiply;
    setMultiplyIsSet(true);
    return this;
  }

  public void unsetMultiply() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MULTIPLY_ISSET_ID);
  }

  /** Returns true if field multiply is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiply() {
    return EncodingUtils.testBit(__isset_bitfield, __MULTIPLY_ISSET_ID);
  }

  public void setMultiplyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MULTIPLY_ISSET_ID, value);
  }

  public int getDivide() {
    return this.divide;
  }

  public Stat setDivide(int divide) {
    this.divide = divide;
    setDivideIsSet(true);
    return this;
  }

  public void unsetDivide() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIVIDE_ISSET_ID);
  }

  /** Returns true if field divide is set (has been assigned a value) and false otherwise */
  public boolean isSetDivide() {
    return EncodingUtils.testBit(__isset_bitfield, __DIVIDE_ISSET_ID);
  }

  public void setDivideIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIVIDE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CURRENT:
      if (value == null) {
        unsetCurrent();
      } else {
        setCurrent((Integer)value);
      }
      break;

    case BASE:
      if (value == null) {
        unsetBase();
      } else {
        setBase((Integer)value);
      }
      break;

    case ADD:
      if (value == null) {
        unsetAdd();
      } else {
        setAdd((Integer)value);
      }
      break;

    case MULTIPLY:
      if (value == null) {
        unsetMultiply();
      } else {
        setMultiply((Integer)value);
      }
      break;

    case DIVIDE:
      if (value == null) {
        unsetDivide();
      } else {
        setDivide((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CURRENT:
      return Integer.valueOf(getCurrent());

    case BASE:
      return Integer.valueOf(getBase());

    case ADD:
      return Integer.valueOf(getAdd());

    case MULTIPLY:
      return Integer.valueOf(getMultiply());

    case DIVIDE:
      return Integer.valueOf(getDivide());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CURRENT:
      return isSetCurrent();
    case BASE:
      return isSetBase();
    case ADD:
      return isSetAdd();
    case MULTIPLY:
      return isSetMultiply();
    case DIVIDE:
      return isSetDivide();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Stat)
      return this.equals((Stat)that);
    return false;
  }

  public boolean equals(Stat that) {
    if (that == null)
      return false;

    boolean this_present_current = true;
    boolean that_present_current = true;
    if (this_present_current || that_present_current) {
      if (!(this_present_current && that_present_current))
        return false;
      if (this.current != that.current)
        return false;
    }

    boolean this_present_base = true;
    boolean that_present_base = true;
    if (this_present_base || that_present_base) {
      if (!(this_present_base && that_present_base))
        return false;
      if (this.base != that.base)
        return false;
    }

    boolean this_present_add = true;
    boolean that_present_add = true;
    if (this_present_add || that_present_add) {
      if (!(this_present_add && that_present_add))
        return false;
      if (this.add != that.add)
        return false;
    }

    boolean this_present_multiply = true;
    boolean that_present_multiply = true;
    if (this_present_multiply || that_present_multiply) {
      if (!(this_present_multiply && that_present_multiply))
        return false;
      if (this.multiply != that.multiply)
        return false;
    }

    boolean this_present_divide = true;
    boolean that_present_divide = true;
    if (this_present_divide || that_present_divide) {
      if (!(this_present_divide && that_present_divide))
        return false;
      if (this.divide != that.divide)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Stat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCurrent()).compareTo(other.isSetCurrent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current, other.current);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBase()).compareTo(other.isSetBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base, other.base);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdd()).compareTo(other.isSetAdd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.add, other.add);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiply()).compareTo(other.isSetMultiply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiply, other.multiply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDivide()).compareTo(other.isSetDivide());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDivide()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divide, other.divide);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Stat(");
    boolean first = true;

    sb.append("current:");
    sb.append(this.current);
    first = false;
    if (!first) sb.append(", ");
    sb.append("base:");
    sb.append(this.base);
    first = false;
    if (!first) sb.append(", ");
    sb.append("add:");
    sb.append(this.add);
    first = false;
    if (!first) sb.append(", ");
    sb.append("multiply:");
    sb.append(this.multiply);
    first = false;
    if (!first) sb.append(", ");
    sb.append("divide:");
    sb.append(this.divide);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatStandardSchemeFactory implements SchemeFactory {
    public StatStandardScheme getScheme() {
      return new StatStandardScheme();
    }
  }

  private static class StatStandardScheme extends StandardScheme<Stat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Stat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CURRENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.current = iprot.readI32();
              struct.setCurrentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.base = iprot.readI32();
              struct.setBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ADD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.add = iprot.readI32();
              struct.setAddIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MULTIPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.multiply = iprot.readI32();
              struct.setMultiplyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DIVIDE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.divide = iprot.readI32();
              struct.setDivideIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Stat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CURRENT_FIELD_DESC);
      oprot.writeI32(struct.current);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BASE_FIELD_DESC);
      oprot.writeI32(struct.base);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ADD_FIELD_DESC);
      oprot.writeI32(struct.add);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MULTIPLY_FIELD_DESC);
      oprot.writeI32(struct.multiply);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIVIDE_FIELD_DESC);
      oprot.writeI32(struct.divide);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatTupleSchemeFactory implements SchemeFactory {
    public StatTupleScheme getScheme() {
      return new StatTupleScheme();
    }
  }

  private static class StatTupleScheme extends TupleScheme<Stat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Stat struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCurrent()) {
        optionals.set(0);
      }
      if (struct.isSetBase()) {
        optionals.set(1);
      }
      if (struct.isSetAdd()) {
        optionals.set(2);
      }
      if (struct.isSetMultiply()) {
        optionals.set(3);
      }
      if (struct.isSetDivide()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetCurrent()) {
        oprot.writeI32(struct.current);
      }
      if (struct.isSetBase()) {
        oprot.writeI32(struct.base);
      }
      if (struct.isSetAdd()) {
        oprot.writeI32(struct.add);
      }
      if (struct.isSetMultiply()) {
        oprot.writeI32(struct.multiply);
      }
      if (struct.isSetDivide()) {
        oprot.writeI32(struct.divide);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Stat struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.current = iprot.readI32();
        struct.setCurrentIsSet(true);
      }
      if (incoming.get(1)) {
        struct.base = iprot.readI32();
        struct.setBaseIsSet(true);
      }
      if (incoming.get(2)) {
        struct.add = iprot.readI32();
        struct.setAddIsSet(true);
      }
      if (incoming.get(3)) {
        struct.multiply = iprot.readI32();
        struct.setMultiplyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.divide = iprot.readI32();
        struct.setDivideIsSet(true);
      }
    }
  }

}

