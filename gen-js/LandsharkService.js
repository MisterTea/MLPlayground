//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

LandsharkService_newGame_args = function(args) {
  this.playerIds = null;
  if (args) {
    if (args.playerIds !== undefined) {
      this.playerIds = args.playerIds;
    }
  }
};
LandsharkService_newGame_args.prototype = {};
LandsharkService_newGame_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.playerIds = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.playerIds.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LandsharkService_newGame_args.prototype.write = function(output) {
  output.writeStructBegin('LandsharkService_newGame_args');
  if (this.playerIds !== null && this.playerIds !== undefined) {
    output.writeFieldBegin('playerIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.playerIds.length);
    for (var iter7 in this.playerIds)
    {
      if (this.playerIds.hasOwnProperty(iter7))
      {
        iter7 = this.playerIds[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LandsharkService_newGame_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
LandsharkService_newGame_result.prototype = {};
LandsharkService_newGame_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LandsharkService_newGame_result.prototype.write = function(output) {
  output.writeStructBegin('LandsharkService_newGame_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LandsharkService_addInput_args = function(args) {
  this.playerId = null;
  this.inputData = null;
  if (args) {
    if (args.playerId !== undefined) {
      this.playerId = args.playerId;
    }
    if (args.inputData !== undefined) {
      this.inputData = args.inputData;
    }
  }
};
LandsharkService_addInput_args.prototype = {};
LandsharkService_addInput_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.playerId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.inputData = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LandsharkService_addInput_args.prototype.write = function(output) {
  output.writeStructBegin('LandsharkService_addInput_args');
  if (this.playerId !== null && this.playerId !== undefined) {
    output.writeFieldBegin('playerId', Thrift.Type.STRING, 1);
    output.writeString(this.playerId);
    output.writeFieldEnd();
  }
  if (this.inputData !== null && this.inputData !== undefined) {
    output.writeFieldBegin('inputData', Thrift.Type.STRING, 2);
    output.writeString(this.inputData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LandsharkService_addInput_result = function(args) {
};
LandsharkService_addInput_result.prototype = {};
LandsharkService_addInput_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LandsharkService_addInput_result.prototype.write = function(output) {
  output.writeStructBegin('LandsharkService_addInput_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LandsharkService_getStates_args = function(args) {
  this.startIndex = null;
  if (args) {
    if (args.startIndex !== undefined) {
      this.startIndex = args.startIndex;
    }
  }
};
LandsharkService_getStates_args.prototype = {};
LandsharkService_getStates_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LandsharkService_getStates_args.prototype.write = function(output) {
  output.writeStructBegin('LandsharkService_getStates_args');
  if (this.startIndex !== null && this.startIndex !== undefined) {
    output.writeFieldBegin('startIndex', Thrift.Type.I32, 1);
    output.writeI32(this.startIndex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LandsharkService_getStates_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
LandsharkService_getStates_result.prototype = {};
LandsharkService_getStates_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new State();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LandsharkService_getStates_result.prototype.write = function(output) {
  output.writeStructBegin('LandsharkService_getStates_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LandsharkServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
LandsharkServiceClient.prototype = {};
LandsharkServiceClient.prototype.newGame = function(playerIds, callback) {
  if (callback === undefined) {
    this.send_newGame(playerIds);
    return this.recv_newGame();
  } else {
    var postData = this.send_newGame(playerIds, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_newGame);
  }
};

LandsharkServiceClient.prototype.send_newGame = function(playerIds, callback) {
  this.output.writeMessageBegin('newGame', Thrift.MessageType.CALL, this.seqid);
  var args = new LandsharkService_newGame_args();
  args.playerIds = playerIds;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LandsharkServiceClient.prototype.recv_newGame = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LandsharkService_newGame_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'newGame failed: unknown result';
};
LandsharkServiceClient.prototype.addInput = function(playerId, inputData, callback) {
  if (callback === undefined) {
    this.send_addInput(playerId, inputData);
    this.recv_addInput();
  } else {
    var postData = this.send_addInput(playerId, inputData, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addInput);
  }
};

LandsharkServiceClient.prototype.send_addInput = function(playerId, inputData, callback) {
  this.output.writeMessageBegin('addInput', Thrift.MessageType.CALL, this.seqid);
  var args = new LandsharkService_addInput_args();
  args.playerId = playerId;
  args.inputData = inputData;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LandsharkServiceClient.prototype.recv_addInput = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LandsharkService_addInput_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
LandsharkServiceClient.prototype.getStates = function(startIndex, callback) {
  if (callback === undefined) {
    this.send_getStates(startIndex);
    return this.recv_getStates();
  } else {
    var postData = this.send_getStates(startIndex, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getStates);
  }
};

LandsharkServiceClient.prototype.send_getStates = function(startIndex, callback) {
  this.output.writeMessageBegin('getStates', Thrift.MessageType.CALL, this.seqid);
  var args = new LandsharkService_getStates_args();
  args.startIndex = startIndex;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LandsharkServiceClient.prototype.recv_getStates = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LandsharkService_getStates_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getStates failed: unknown result';
};
