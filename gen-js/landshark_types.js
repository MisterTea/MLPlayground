//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


PropertyType = {
'STREET' : 0,
'AUCTIONHOUSE' : 1,
'UTILITY' : 2,
'START' : 3,
'TAXES' : 4,
'EMPTY' : 5
};
TurnState = {
'START_GAME' : 0,
'ROLLING_DICE' : 1,
'ASK_AUCTION' : 2,
'ASK_ANY_AUCTION' : 3,
'FORCE_AUCTION' : 4,
'BUYING_HOUSES' : 5,
'AUCTION' : 6,
'AUCTION_RESULTS' : 7,
'PAYING_RENT' : 8
};
LandsharkCommandType = {
'BID' : 1000,
'PASS' : 1001,
'BUY_HOUSES' : 1002,
'CHOOSE_AUCTION' : 1003
};
PropertyGroup = function(args) {
  this.memberNames = [];
  this.housePrice = null;
  this.type = null;
  if (args) {
    if (args.memberNames !== undefined) {
      this.memberNames = args.memberNames;
    }
    if (args.housePrice !== undefined) {
      this.housePrice = args.housePrice;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
PropertyGroup.prototype = {};
PropertyGroup.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size0 = 0;
        var _rtmp34;
        this.memberNames = [];
        var _etype3 = 0;
        _rtmp34 = input.readSetBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.memberNames.push(elem6);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.housePrice = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PropertyGroup.prototype.write = function(output) {
  output.writeStructBegin('PropertyGroup');
  if (this.memberNames !== null && this.memberNames !== undefined) {
    output.writeFieldBegin('memberNames', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.memberNames.length);
    for (var iter7 in this.memberNames)
    {
      if (this.memberNames.hasOwnProperty(iter7))
      {
        iter7 = this.memberNames[iter7];
        output.writeString(iter7);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.housePrice !== null && this.housePrice !== undefined) {
    output.writeFieldBegin('housePrice', Thrift.Type.I32, 2);
    output.writeI32(this.housePrice);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PlayerState = function(args) {
  this.name = null;
  this.properties = [];
  this.location = 0;
  this.cash = 0;
  this.quit = false;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.properties !== undefined) {
      this.properties = args.properties;
    }
    if (args.location !== undefined) {
      this.location = args.location;
    }
    if (args.cash !== undefined) {
      this.cash = args.cash;
    }
    if (args.quit !== undefined) {
      this.quit = args.quit;
    }
  }
};
PlayerState.prototype = {};
PlayerState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size8 = 0;
        var _rtmp312;
        this.properties = [];
        var _etype11 = 0;
        _rtmp312 = input.readSetBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString().value;
          this.properties.push(elem14);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.location = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.cash = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.quit = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PlayerState.prototype.write = function(output) {
  output.writeStructBegin('PlayerState');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.properties !== null && this.properties !== undefined) {
    output.writeFieldBegin('properties', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.properties.length);
    for (var iter15 in this.properties)
    {
      if (this.properties.hasOwnProperty(iter15))
      {
        iter15 = this.properties[iter15];
        output.writeString(iter15);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.I32, 3);
    output.writeI32(this.location);
    output.writeFieldEnd();
  }
  if (this.cash !== null && this.cash !== undefined) {
    output.writeFieldBegin('cash', Thrift.Type.I32, 4);
    output.writeI32(this.cash);
    output.writeFieldEnd();
  }
  if (this.quit !== null && this.quit !== undefined) {
    output.writeFieldBegin('quit', Thrift.Type.BOOL, 5);
    output.writeBool(this.quit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuctionState = function(args) {
  this.property = null;
  this.auctionOwner = null;
  this.bids = {
};
  if (args) {
    if (args.property !== undefined) {
      this.property = args.property;
    }
    if (args.auctionOwner !== undefined) {
      this.auctionOwner = args.auctionOwner;
    }
    if (args.bids !== undefined) {
      this.bids = args.bids;
    }
  }
};
AuctionState.prototype = {};
AuctionState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.property = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.auctionOwner = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size16 = 0;
        var _rtmp320;
        this.bids = {};
        var _ktype17 = 0;
        var _vtype18 = 0;
        _rtmp320 = input.readMapBegin();
        _ktype17 = _rtmp320.ktype;
        _vtype18 = _rtmp320.vtype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          if (_i21 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key22 = null;
          var val23 = null;
          key22 = input.readString().value;
          val23 = input.readI32().value;
          this.bids[key22] = val23;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuctionState.prototype.write = function(output) {
  output.writeStructBegin('AuctionState');
  if (this.property !== null && this.property !== undefined) {
    output.writeFieldBegin('property', Thrift.Type.STRING, 1);
    output.writeString(this.property);
    output.writeFieldEnd();
  }
  if (this.auctionOwner !== null && this.auctionOwner !== undefined) {
    output.writeFieldBegin('auctionOwner', Thrift.Type.STRING, 2);
    output.writeString(this.auctionOwner);
    output.writeFieldEnd();
  }
  if (this.bids !== null && this.bids !== undefined) {
    output.writeFieldBegin('bids', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.bids));
    for (var kiter24 in this.bids)
    {
      if (this.bids.hasOwnProperty(kiter24))
      {
        var viter25 = this.bids[kiter24];
        output.writeString(kiter24);
        output.writeI32(viter25);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

State = function(args) {
  this.id = null;
  this.playerStates = [];
  this.houses = {
};
  this.playerTurn = 0;
  this.turnState = 0;
  this.auctionState = null;
  this.dice = [];
  this.numDoubles = 0;
  this.message = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.playerStates !== undefined) {
      this.playerStates = args.playerStates;
    }
    if (args.houses !== undefined) {
      this.houses = args.houses;
    }
    if (args.playerTurn !== undefined) {
      this.playerTurn = args.playerTurn;
    }
    if (args.turnState !== undefined) {
      this.turnState = args.turnState;
    }
    if (args.auctionState !== undefined) {
      this.auctionState = args.auctionState;
    }
    if (args.dice !== undefined) {
      this.dice = args.dice;
    }
    if (args.numDoubles !== undefined) {
      this.numDoubles = args.numDoubles;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
State.prototype = {};
State.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.playerStates = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = new PlayerState();
          elem32.read(input);
          this.playerStates.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size33 = 0;
        var _rtmp337;
        this.houses = {};
        var _ktype34 = 0;
        var _vtype35 = 0;
        _rtmp337 = input.readMapBegin();
        _ktype34 = _rtmp337.ktype;
        _vtype35 = _rtmp337.vtype;
        _size33 = _rtmp337.size;
        for (var _i38 = 0; _i38 < _size33; ++_i38)
        {
          if (_i38 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key39 = null;
          var val40 = null;
          key39 = input.readString().value;
          val40 = input.readI32().value;
          this.houses[key39] = val40;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.playerTurn = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.turnState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.auctionState = new AuctionState();
        this.auctionState.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 100:
      if (ftype == Thrift.Type.LIST) {
        var _size41 = 0;
        var _rtmp345;
        this.dice = [];
        var _etype44 = 0;
        _rtmp345 = input.readListBegin();
        _etype44 = _rtmp345.etype;
        _size41 = _rtmp345.size;
        for (var _i46 = 0; _i46 < _size41; ++_i46)
        {
          var elem47 = null;
          elem47 = input.readI32().value;
          this.dice.push(elem47);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 101:
      if (ftype == Thrift.Type.I32) {
        this.numDoubles = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 102:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

State.prototype.write = function(output) {
  output.writeStructBegin('State');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.playerStates !== null && this.playerStates !== undefined) {
    output.writeFieldBegin('playerStates', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.playerStates.length);
    for (var iter48 in this.playerStates)
    {
      if (this.playerStates.hasOwnProperty(iter48))
      {
        iter48 = this.playerStates[iter48];
        iter48.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.houses !== null && this.houses !== undefined) {
    output.writeFieldBegin('houses', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.houses));
    for (var kiter49 in this.houses)
    {
      if (this.houses.hasOwnProperty(kiter49))
      {
        var viter50 = this.houses[kiter49];
        output.writeString(kiter49);
        output.writeI32(viter50);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.playerTurn !== null && this.playerTurn !== undefined) {
    output.writeFieldBegin('playerTurn', Thrift.Type.I32, 4);
    output.writeI32(this.playerTurn);
    output.writeFieldEnd();
  }
  if (this.turnState !== null && this.turnState !== undefined) {
    output.writeFieldBegin('turnState', Thrift.Type.I32, 5);
    output.writeI32(this.turnState);
    output.writeFieldEnd();
  }
  if (this.auctionState !== null && this.auctionState !== undefined) {
    output.writeFieldBegin('auctionState', Thrift.Type.STRUCT, 6);
    this.auctionState.write(output);
    output.writeFieldEnd();
  }
  if (this.dice !== null && this.dice !== undefined) {
    output.writeFieldBegin('dice', Thrift.Type.LIST, 100);
    output.writeListBegin(Thrift.Type.I32, this.dice.length);
    for (var iter51 in this.dice)
    {
      if (this.dice.hasOwnProperty(iter51))
      {
        iter51 = this.dice[iter51];
        output.writeI32(iter51);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.numDoubles !== null && this.numDoubles !== undefined) {
    output.writeFieldBegin('numDoubles', Thrift.Type.I32, 101);
    output.writeI32(this.numDoubles);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 102);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Property = function(args) {
  this.name = null;
  this.type = null;
  this.rent = [];
  this.group = null;
  this.tax = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.rent !== undefined) {
      this.rent = args.rent;
    }
    if (args.group !== undefined) {
      this.group = args.group;
    }
    if (args.tax !== undefined) {
      this.tax = args.tax;
    }
  }
};
Property.prototype = {};
Property.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size52 = 0;
        var _rtmp356;
        this.rent = [];
        var _etype55 = 0;
        _rtmp356 = input.readListBegin();
        _etype55 = _rtmp356.etype;
        _size52 = _rtmp356.size;
        for (var _i57 = 0; _i57 < _size52; ++_i57)
        {
          var elem58 = null;
          elem58 = input.readI32().value;
          this.rent.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.group = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.tax = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Property.prototype.write = function(output) {
  output.writeStructBegin('Property');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.rent !== null && this.rent !== undefined) {
    output.writeFieldBegin('rent', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.rent.length);
    for (var iter59 in this.rent)
    {
      if (this.rent.hasOwnProperty(iter59))
      {
        iter59 = this.rent[iter59];
        output.writeI32(iter59);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.group !== null && this.group !== undefined) {
    output.writeFieldBegin('group', Thrift.Type.STRING, 4);
    output.writeString(this.group);
    output.writeFieldEnd();
  }
  if (this.tax !== null && this.tax !== undefined) {
    output.writeFieldBegin('tax', Thrift.Type.I32, 5);
    output.writeI32(this.tax);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Board = function(args) {
  this.properties = {
};
  this.propertyOrder = [];
  this.startingMoney = 1500;
  this.propertyGroups = {
};
  if (args) {
    if (args.properties !== undefined) {
      this.properties = args.properties;
    }
    if (args.propertyOrder !== undefined) {
      this.propertyOrder = args.propertyOrder;
    }
    if (args.startingMoney !== undefined) {
      this.startingMoney = args.startingMoney;
    }
    if (args.propertyGroups !== undefined) {
      this.propertyGroups = args.propertyGroups;
    }
  }
};
Board.prototype = {};
Board.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size60 = 0;
        var _rtmp364;
        this.properties = {};
        var _ktype61 = 0;
        var _vtype62 = 0;
        _rtmp364 = input.readMapBegin();
        _ktype61 = _rtmp364.ktype;
        _vtype62 = _rtmp364.vtype;
        _size60 = _rtmp364.size;
        for (var _i65 = 0; _i65 < _size60; ++_i65)
        {
          if (_i65 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key66 = null;
          var val67 = null;
          key66 = input.readString().value;
          val67 = new Property();
          val67.read(input);
          this.properties[key66] = val67;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size68 = 0;
        var _rtmp372;
        this.propertyOrder = [];
        var _etype71 = 0;
        _rtmp372 = input.readListBegin();
        _etype71 = _rtmp372.etype;
        _size68 = _rtmp372.size;
        for (var _i73 = 0; _i73 < _size68; ++_i73)
        {
          var elem74 = null;
          elem74 = input.readString().value;
          this.propertyOrder.push(elem74);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.startingMoney = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size75 = 0;
        var _rtmp379;
        this.propertyGroups = {};
        var _ktype76 = 0;
        var _vtype77 = 0;
        _rtmp379 = input.readMapBegin();
        _ktype76 = _rtmp379.ktype;
        _vtype77 = _rtmp379.vtype;
        _size75 = _rtmp379.size;
        for (var _i80 = 0; _i80 < _size75; ++_i80)
        {
          if (_i80 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key81 = null;
          var val82 = null;
          key81 = input.readString().value;
          val82 = new PropertyGroup();
          val82.read(input);
          this.propertyGroups[key81] = val82;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Board.prototype.write = function(output) {
  output.writeStructBegin('Board');
  if (this.properties !== null && this.properties !== undefined) {
    output.writeFieldBegin('properties', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.properties));
    for (var kiter83 in this.properties)
    {
      if (this.properties.hasOwnProperty(kiter83))
      {
        var viter84 = this.properties[kiter83];
        output.writeString(kiter83);
        viter84.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.propertyOrder !== null && this.propertyOrder !== undefined) {
    output.writeFieldBegin('propertyOrder', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.propertyOrder.length);
    for (var iter85 in this.propertyOrder)
    {
      if (this.propertyOrder.hasOwnProperty(iter85))
      {
        iter85 = this.propertyOrder[iter85];
        output.writeString(iter85);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.startingMoney !== null && this.startingMoney !== undefined) {
    output.writeFieldBegin('startingMoney', Thrift.Type.I32, 3);
    output.writeI32(this.startingMoney);
    output.writeFieldEnd();
  }
  if (this.propertyGroups !== null && this.propertyGroups !== undefined) {
    output.writeFieldBegin('propertyGroups', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.propertyGroups));
    for (var kiter86 in this.propertyGroups)
    {
      if (this.propertyGroups.hasOwnProperty(kiter86))
      {
        var viter87 = this.propertyGroups[kiter86];
        output.writeString(kiter86);
        viter87.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LandsharkCommand = function(args) {
  this.player = null;
  this.creationTime = null;
  this.type = null;
  this.property = null;
  this.housePurchases = null;
  this.bid = null;
  if (args) {
    if (args.player !== undefined) {
      this.player = args.player;
    }
    if (args.creationTime !== undefined) {
      this.creationTime = args.creationTime;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.property !== undefined) {
      this.property = args.property;
    }
    if (args.housePurchases !== undefined) {
      this.housePurchases = args.housePurchases;
    }
    if (args.bid !== undefined) {
      this.bid = args.bid;
    }
  }
};
LandsharkCommand.prototype = {};
LandsharkCommand.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.player = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.creationTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.property = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size88 = 0;
        var _rtmp392;
        this.housePurchases = {};
        var _ktype89 = 0;
        var _vtype90 = 0;
        _rtmp392 = input.readMapBegin();
        _ktype89 = _rtmp392.ktype;
        _vtype90 = _rtmp392.vtype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          if (_i93 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key94 = null;
          var val95 = null;
          key94 = input.readString().value;
          val95 = input.readI32().value;
          this.housePurchases[key94] = val95;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.bid = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LandsharkCommand.prototype.write = function(output) {
  output.writeStructBegin('LandsharkCommand');
  if (this.player !== null && this.player !== undefined) {
    output.writeFieldBegin('player', Thrift.Type.STRING, 1);
    output.writeString(this.player);
    output.writeFieldEnd();
  }
  if (this.creationTime !== null && this.creationTime !== undefined) {
    output.writeFieldBegin('creationTime', Thrift.Type.I64, 2);
    output.writeI64(this.creationTime);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.property !== null && this.property !== undefined) {
    output.writeFieldBegin('property', Thrift.Type.STRING, 4);
    output.writeString(this.property);
    output.writeFieldEnd();
  }
  if (this.housePurchases !== null && this.housePurchases !== undefined) {
    output.writeFieldBegin('housePurchases', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.housePurchases));
    for (var kiter96 in this.housePurchases)
    {
      if (this.housePurchases.hasOwnProperty(kiter96))
      {
        var viter97 = this.housePurchases[kiter96];
        output.writeString(kiter96);
        output.writeI32(viter97);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.bid !== null && this.bid !== undefined) {
    output.writeFieldBegin('bid', Thrift.Type.I32, 6);
    output.writeI32(this.bid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PropertyStats = function(args) {
  this.owner = null;
  this.price = null;
  this.investment = null;
  this.revenue = null;
  this.street = null;
  this.duration = null;
  if (args) {
    if (args.owner !== undefined) {
      this.owner = args.owner;
    }
    if (args.price !== undefined) {
      this.price = args.price;
    }
    if (args.investment !== undefined) {
      this.investment = args.investment;
    }
    if (args.revenue !== undefined) {
      this.revenue = args.revenue;
    }
    if (args.street !== undefined) {
      this.street = args.street;
    }
    if (args.duration !== undefined) {
      this.duration = args.duration;
    }
  }
};
PropertyStats.prototype = {};
PropertyStats.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.owner = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.price = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.investment = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.revenue = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.street = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.duration = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PropertyStats.prototype.write = function(output) {
  output.writeStructBegin('PropertyStats');
  if (this.owner !== null && this.owner !== undefined) {
    output.writeFieldBegin('owner', Thrift.Type.STRING, 1);
    output.writeString(this.owner);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.I32, 2);
    output.writeI32(this.price);
    output.writeFieldEnd();
  }
  if (this.investment !== null && this.investment !== undefined) {
    output.writeFieldBegin('investment', Thrift.Type.I32, 3);
    output.writeI32(this.investment);
    output.writeFieldEnd();
  }
  if (this.revenue !== null && this.revenue !== undefined) {
    output.writeFieldBegin('revenue', Thrift.Type.I32, 4);
    output.writeI32(this.revenue);
    output.writeFieldEnd();
  }
  if (this.street !== null && this.street !== undefined) {
    output.writeFieldBegin('street', Thrift.Type.BOOL, 5);
    output.writeBool(this.street);
    output.writeFieldEnd();
  }
  if (this.duration !== null && this.duration !== undefined) {
    output.writeFieldBegin('duration', Thrift.Type.I32, 6);
    output.writeI32(this.duration);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PlayerStats = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
PlayerStats.prototype = {};
PlayerStats.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PlayerStats.prototype.write = function(output) {
  output.writeStructBegin('PlayerStats');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Stats = function(args) {
  this.propertyOwnerStats = {
};
  this.playerStats = {
};
  if (args) {
    if (args.propertyOwnerStats !== undefined) {
      this.propertyOwnerStats = args.propertyOwnerStats;
    }
    if (args.playerStats !== undefined) {
      this.playerStats = args.playerStats;
    }
  }
};
Stats.prototype = {};
Stats.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size98 = 0;
        var _rtmp3102;
        this.propertyOwnerStats = {};
        var _ktype99 = 0;
        var _vtype100 = 0;
        _rtmp3102 = input.readMapBegin();
        _ktype99 = _rtmp3102.ktype;
        _vtype100 = _rtmp3102.vtype;
        _size98 = _rtmp3102.size;
        for (var _i103 = 0; _i103 < _size98; ++_i103)
        {
          if (_i103 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key104 = null;
          var val105 = null;
          key104 = input.readString().value;
          var _size106 = 0;
          var _rtmp3110;
          val105 = [];
          var _etype109 = 0;
          _rtmp3110 = input.readListBegin();
          _etype109 = _rtmp3110.etype;
          _size106 = _rtmp3110.size;
          for (var _i111 = 0; _i111 < _size106; ++_i111)
          {
            var elem112 = null;
            elem112 = new PropertyStats();
            elem112.read(input);
            val105.push(elem112);
          }
          input.readListEnd();
          this.propertyOwnerStats[key104] = val105;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size113 = 0;
        var _rtmp3117;
        this.playerStats = {};
        var _ktype114 = 0;
        var _vtype115 = 0;
        _rtmp3117 = input.readMapBegin();
        _ktype114 = _rtmp3117.ktype;
        _vtype115 = _rtmp3117.vtype;
        _size113 = _rtmp3117.size;
        for (var _i118 = 0; _i118 < _size113; ++_i118)
        {
          if (_i118 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key119 = null;
          var val120 = null;
          key119 = input.readString().value;
          val120 = new PlayerStats();
          val120.read(input);
          this.playerStats[key119] = val120;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Stats.prototype.write = function(output) {
  output.writeStructBegin('Stats');
  if (this.propertyOwnerStats !== null && this.propertyOwnerStats !== undefined) {
    output.writeFieldBegin('propertyOwnerStats', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.propertyOwnerStats));
    for (var kiter121 in this.propertyOwnerStats)
    {
      if (this.propertyOwnerStats.hasOwnProperty(kiter121))
      {
        var viter122 = this.propertyOwnerStats[kiter121];
        output.writeString(kiter121);
        output.writeListBegin(Thrift.Type.STRUCT, viter122.length);
        for (var iter123 in viter122)
        {
          if (viter122.hasOwnProperty(iter123))
          {
            iter123 = viter122[iter123];
            iter123.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.playerStats !== null && this.playerStats !== undefined) {
    output.writeFieldBegin('playerStats', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.playerStats));
    for (var kiter124 in this.playerStats)
    {
      if (this.playerStats.hasOwnProperty(kiter124))
      {
        var viter125 = this.playerStats[kiter124];
        output.writeString(kiter124);
        viter125.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

