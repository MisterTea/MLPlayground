//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


CoreCommandType = {
'CHAT' : 0,
'QUIT' : 1
};
ServerMessageType = {
'ERROR' : 0,
'CHAT' : 1,
'NEW_STATE' : 2
};
DieRoll = function(args) {
  this.numDice = null;
  this.dieSize = null;
  this.modifier = null;
  if (args) {
    if (args.numDice !== undefined) {
      this.numDice = args.numDice;
    }
    if (args.dieSize !== undefined) {
      this.dieSize = args.dieSize;
    }
    if (args.modifier !== undefined) {
      this.modifier = args.modifier;
    }
  }
};
DieRoll.prototype = {};
DieRoll.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numDice = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dieSize = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.modifier = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DieRoll.prototype.write = function(output) {
  output.writeStructBegin('DieRoll');
  if (this.numDice !== null && this.numDice !== undefined) {
    output.writeFieldBegin('numDice', Thrift.Type.I32, 1);
    output.writeI32(this.numDice);
    output.writeFieldEnd();
  }
  if (this.dieSize !== null && this.dieSize !== undefined) {
    output.writeFieldBegin('dieSize', Thrift.Type.I32, 2);
    output.writeI32(this.dieSize);
    output.writeFieldEnd();
  }
  if (this.modifier !== null && this.modifier !== undefined) {
    output.writeFieldBegin('modifier', Thrift.Type.I32, 3);
    output.writeI32(this.modifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CoreCommand = function(args) {
  this.player = null;
  this.creationTime = null;
  this.type = null;
  this.chat = null;
  if (args) {
    if (args.player !== undefined) {
      this.player = args.player;
    }
    if (args.creationTime !== undefined) {
      this.creationTime = args.creationTime;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.chat !== undefined) {
      this.chat = args.chat;
    }
  }
};
CoreCommand.prototype = {};
CoreCommand.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.player = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.creationTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.chat = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoreCommand.prototype.write = function(output) {
  output.writeStructBegin('CoreCommand');
  if (this.player !== null && this.player !== undefined) {
    output.writeFieldBegin('player', Thrift.Type.STRING, 1);
    output.writeString(this.player);
    output.writeFieldEnd();
  }
  if (this.creationTime !== null && this.creationTime !== undefined) {
    output.writeFieldBegin('creationTime', Thrift.Type.I64, 2);
    output.writeI64(this.creationTime);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.chat !== null && this.chat !== undefined) {
    output.writeFieldBegin('chat', Thrift.Type.STRING, 4);
    output.writeString(this.chat);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ServerMessage = function(args) {
  this.type = null;
  this.creationTime = null;
  this.message = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.creationTime !== undefined) {
      this.creationTime = args.creationTime;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
ServerMessage.prototype = {};
ServerMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.creationTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServerMessage.prototype.write = function(output) {
  output.writeStructBegin('ServerMessage');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.creationTime !== null && this.creationTime !== undefined) {
    output.writeFieldBegin('creationTime', Thrift.Type.I64, 2);
    output.writeI64(this.creationTime);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PlayerServerState = function(args) {
  this.player = null;
  this.ipAddress = null;
  this.aiType = null;
  if (args) {
    if (args.player !== undefined) {
      this.player = args.player;
    }
    if (args.ipAddress !== undefined) {
      this.ipAddress = args.ipAddress;
    }
    if (args.aiType !== undefined) {
      this.aiType = args.aiType;
    }
  }
};
PlayerServerState.prototype = {};
PlayerServerState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.player = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ipAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.aiType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PlayerServerState.prototype.write = function(output) {
  output.writeStructBegin('PlayerServerState');
  if (this.player !== null && this.player !== undefined) {
    output.writeFieldBegin('player', Thrift.Type.STRING, 1);
    output.writeString(this.player);
    output.writeFieldEnd();
  }
  if (this.ipAddress !== null && this.ipAddress !== undefined) {
    output.writeFieldBegin('ipAddress', Thrift.Type.STRING, 2);
    output.writeString(this.ipAddress);
    output.writeFieldEnd();
  }
  if (this.aiType !== null && this.aiType !== undefined) {
    output.writeFieldBegin('aiType', Thrift.Type.STRING, 3);
    output.writeString(this.aiType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

