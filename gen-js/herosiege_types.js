//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Stat = function(args) {
  this.current = null;
  this.base = null;
  this.add = null;
  this.multiply = null;
  this.divide = null;
  if (args) {
    if (args.current !== undefined) {
      this.current = args.current;
    }
    if (args.base !== undefined) {
      this.base = args.base;
    }
    if (args.add !== undefined) {
      this.add = args.add;
    }
    if (args.multiply !== undefined) {
      this.multiply = args.multiply;
    }
    if (args.divide !== undefined) {
      this.divide = args.divide;
    }
  }
};
Stat.prototype = {};
Stat.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.current = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.base = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.add = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.multiply = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.divide = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Stat.prototype.write = function(output) {
  output.writeStructBegin('Stat');
  if (this.current !== null && this.current !== undefined) {
    output.writeFieldBegin('current', Thrift.Type.I32, 1);
    output.writeI32(this.current);
    output.writeFieldEnd();
  }
  if (this.base !== null && this.base !== undefined) {
    output.writeFieldBegin('base', Thrift.Type.I32, 2);
    output.writeI32(this.base);
    output.writeFieldEnd();
  }
  if (this.add !== null && this.add !== undefined) {
    output.writeFieldBegin('add', Thrift.Type.I32, 3);
    output.writeI32(this.add);
    output.writeFieldEnd();
  }
  if (this.multiply !== null && this.multiply !== undefined) {
    output.writeFieldBegin('multiply', Thrift.Type.I32, 4);
    output.writeI32(this.multiply);
    output.writeFieldEnd();
  }
  if (this.divide !== null && this.divide !== undefined) {
    output.writeFieldBegin('divide', Thrift.Type.I32, 5);
    output.writeI32(this.divide);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hero = function(args) {
  this.name = null;
  this.health = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.health !== undefined) {
      this.health = args.health;
    }
  }
};
Hero.prototype = {};
Hero.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.health = new Stat();
        this.health.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hero.prototype.write = function(output) {
  output.writeStructBegin('Hero');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.health !== null && this.health !== undefined) {
    output.writeFieldBegin('health', Thrift.Type.STRUCT, 2);
    this.health.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

